#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef VISIOMOVEESSENTIAL_SWIFT_H
#define VISIOMOVEESSENTIAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VisioMoveEssential",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)








typedef SWIFT_ENUM(NSInteger, VMEAnchorMode, open) {
/// Anchor to the top left.
/// version:
/// 1.14
  VMEAnchorModeTopLeft = 0,
/// Anchor to the top center
/// version:
/// 1.14
  VMEAnchorModeTopCenter = 1,
/// Anchor to the top right
/// version:
/// 1.14
  VMEAnchorModeTopRight = 2,
/// Anchor to the center left
/// version:
/// 1.14
  VMEAnchorModeCenterLeft = 3,
/// Anchor to the center
/// version:
/// 1.14
  VMEAnchorModeCenter = 4,
/// Anchor to the center right
/// version:
/// 1.14
  VMEAnchorModeCenterRight = 5,
/// Anchor to the bottom left
/// version:
/// 1.14
  VMEAnchorModeBottomLeft = 6,
/// Anchor to the bottom center
/// version:
/// 1.14
  VMEAnchorModeBottomCenter = 7,
/// Anchor to the bottom right
/// version:
/// 1.14
  VMEAnchorModeBottomRight = 8,
};


/// Callback protocol to be notified of animation events
/// version:
/// 1.7
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMEAnimationCallback_")
@protocol VMEAnimationCallback <NSObject>
@optional
/// Notify the callback that the animation did finish.
/// version:
/// 1.7
- (void)didFinish;
@end

@class VMEMapController;
@class NSString;
@class VMEPosition;

/// Interface definition of methods that are invoked when building related event occurs within the map.
/// version:
/// 1.17
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     mMapController.setBuildingListener(self)
///     mMapController.loadMapData()
/// }
/// func mapDidSelectBuilding(mapController: VMEMapController, buildingID: String, position: VMEPosition?) -> Bool {
///    // ...
///     return true
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential19VMEBuildingListener_")
@protocol VMEBuildingListener <NSObject>
@optional
/// Notifies the listener that a poi has been selected.
/// version:
/// 1.17
/// \param mapController The originator of the notification
///
/// \param buildingID The ID of the building selected
///
/// \param position The physical position where the select event took poi within the map.
///
///
/// returns:
/// true if the listener consumes the event, false otherwise.
- (BOOL)mapDidSelectBuildingWithMapController:(VMEMapController * _Nonnull)mapController buildingID:(NSString * _Nonnull)buildingID position:(VMEPosition * _Nullable)position SWIFT_WARN_UNUSED_RESULT;
@end

@class VMELatLng;

/// An immutable class that aggregates all camera context such as target, altitude, bearing, pitch, and radius.
/// version:
/// 1.24
SWIFT_CLASS("_TtC18VisioMoveEssential16VMECameraContext")
@interface VMECameraContext : NSObject
- (VMELatLng * _Nonnull)getTarget SWIFT_WARN_UNUSED_RESULT;
- (double)getAltitude SWIFT_WARN_UNUSED_RESULT;
- (double)getBearing SWIFT_WARN_UNUSED_RESULT;
- (double)getPitch SWIFT_WARN_UNUSED_RESULT;
- (double)getRadius SWIFT_WARN_UNUSED_RESULT;
/// Compares this camera context to the specified object.
/// version:
/// 1.24
/// \param object The camera context to compare this camera context against.
///
///
/// returns:
/// true if this VMECameraContext represents the same camera context as the specified, false otherwise.
- (BOOL)isEqual:(id _Nullable)pCameraContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// VMECameraDistanceRange represents a distance element that may be associated with a VMECameraUpdate object.
/// It encapsulates some logic for controlling the distance of the camera. It should only be constructed using the factory helper methods below.
/// The camera will use the previously specified camera distance range when it’s not specified in the camera update.
/// note:
/// The VMECameraDistanceRange object is immutable.
/// note:
/// In the above example, the camera will keep its altitude = 100 until another VMECameraUpdate is set with a new VMECameraDistanceRange.
/// version:
/// 1.18
/// \code
/// let lCameraUpdate = VMECameraUpdate.initCameraUpdate(builderBlock:{ builder in
///     builder.targets = [lLocation.position]
///     builder.heading = lCameraHeading
///     builder.pitch = VMECameraPitch.initCameraPitch(value: -30.0)
///     builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 5, maxRadius: 20)
///     })
/// mapController.animateCamera(lCameraUpdate, duration: 0.5, callback: nil)
///
/// \endcode
SWIFT_CLASS("_TtC18VisioMoveEssential22VMECameraDistanceRange")
@interface VMECameraDistanceRange : NSObject <NSCopying>
/// Keep the camera’s current altitude range.
/// version:
/// 1.18
+ (nonnull instancetype)initCurrentAltitudeRange SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the default altitude range.
/// version:
/// 1.18
+ (nonnull instancetype)initDefaultAltitudeRange SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the radius to control the distance of the camera.
/// The radius distance is represented as the distance from the camera to the ground along the camera’s view axis.
/// Internally the radius distance will be converted to a min/max altitude which must respect the min/max altitude limits of the map.
/// version:
/// 1.18
/// \param minRadius the minimum radius of the camera
///
/// \param maxRadius the maximum radius of the camera
///
+ (nonnull instancetype)initRadiusRangeWithMinRadius:(double)pMinRadius maxRadius:(double)pMaxRadius SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the altitude  to control the distance of the camera
/// version:
/// 1.18
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     minAltitude: the minimum altitude of the camera, can’t be lower than the minimum altitude set in VisioMapEditor
///   </li>
///   <li>
///     maxAltitude: the maximum altitude of the camera, can’t be higher than the maximum altitude set in VisioMapEditor
///   </li>
/// </ul>
+ (nonnull instancetype)initAltitudeRangeWithMinAltitude:(double)pMinAltitude maxAltitude:(double)pMaxAltitude SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraDistanceRange * _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential30VMECameraDistanceAltitudeRange")
@interface VMECameraDistanceAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential37VMECameraDistanceCurrentAltitudeRange")
@interface VMECameraDistanceCurrentAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential37VMECameraDistanceDefaultAltitudeRange")
@interface VMECameraDistanceDefaultAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential28VMECameraDistanceRadiusRange")
@interface VMECameraDistanceRadiusRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// VMECameraHeading represents a heading element that may be associated with a VMECameraUpdate object.
/// It encapsulates some logic for controlling the camera’s heading. It should only be constructed using the factory helper methods below.
/// note:
/// The VMECameraHeading object is immutable.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential16VMECameraHeading")
@interface VMECameraHeading : NSObject <NSCopying>
+ (nonnull instancetype)initCameraHeadingCurrent SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraHeadingWithPoiID:(NSString * _Nonnull)pPoiID SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraHeadingWithValue:(double)pHeading SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraHeading * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential23VMECameraHeadingCurrent")
@interface VMECameraHeadingCurrent : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pCameraHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential19VMECameraHeadingPOI")
@interface VMECameraHeadingPOI : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraHeadingValue")
@interface VMECameraHeadingValue : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// interface definition of methods that are invoked when camera has moved
/// version:
/// 1.24
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     mMapController.setCameraListener(self)
///     mMapController.loadMapData()
/// }
/// func mapCameraDidMove(mapController: VMEMapController)  {
///    // ...
///
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential17VMECameraListener_")
@protocol VMECameraListener <NSObject>
@optional
/// Notifies the listener that the camera has moved.
/// Called repeatedly as the camera continues to move.
/// This may be called as often as once every frame and should not perform expensive operations.
/// version:
/// 1.24
/// \param mapController The originator of the notification
///
- (void)mapCameraDidMoveWithMapController:(VMEMapController * _Nonnull)mapController;
@end

/// This enum defines the possible reasons that might invoke the camera to move.
/// version:
/// 1.25
typedef SWIFT_ENUM(NSInteger, VMECameraMoveReason, open) {
/// Non-gesture animation initiated in response to user actions. For example: poi selected, location tracker, or next instruction.
/// version:
/// 1.25
  VMECameraMoveReasonAnimation = 0,
/// Developer initiated animation.
/// version:
/// 1.25
  VMECameraMoveReasonDeveloperAnimation = 1,
/// Camera motion initiated in response to user gestures on the map. For example: drag, pinch to zoom, or rotate.
/// version:
/// 1.25
  VMECameraMoveReasonGesture = 2,
};


SWIFT_CLASS("_TtC18VisioMoveEssential14VMECameraPitch")
@interface VMECameraPitch : NSObject <NSCopying>
+ (nonnull instancetype)initCameraPitchCurrent SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraPitchDefault SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraPitchWithValue:(double)pPitch SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraPitch * _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraPitchCurrent")
@interface VMECameraPitchCurrent : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraPitchDefault")
@interface VMECameraPitchDefault : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential19VMECameraPitchValue")
@interface VMECameraPitchValue : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VMECameraUpdateBuilder;

/// Represents a camera update that can be applied to the VMEMapController.
/// An immutable class that aggregates all camera update parameters such as  targets, padding, min/max altitude, and heading.
/// Use the provided constructors to instantiate different types of camera updates.
/// A camera update will update the camera’s viewpoint and if necessary will also update the scene so that the viewpoint is focused on the correct building/floor.
/// version:
/// 1.0
SWIFT_CLASS("_TtC18VisioMoveEssential15VMECameraUpdate")
@interface VMECameraUpdate : NSObject
/// The camera current focal point.
/// This constant should be used when a pitch/heading animation should keep focusing on the current focal point.
/// version:
/// 1.18
/// \code
///    let lCameraUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///         builder.targets = [VMECameraUpdate.CAMERA_FOCAL_POINT]
///         builder.heading = VMECameraHeading.initCameraHeading(value:80)
///     })
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CAMERA_FOCAL_POINT;)
+ (NSString * _Nonnull)CAMERA_FOCAL_POINT SWIFT_WARN_UNUSED_RESULT;
/// Compare current VMECameraUpdate with another.
/// version:
/// 1.18
/// \param cameraUpdate The CameraUpdate to compare with.
///
- (BOOL)isEqual:(id _Nullable)pCameraUpdate SWIFT_WARN_UNUSED_RESULT;
/// Constructs a VMECameraUpdate.
/// version:
/// 1.7
/// <ul>
///   <li>
///     Parameters:
///     builderBlock: The builder block responsible for building the object.
///   </li>
/// </ul>
+ (nonnull instancetype)initCameraUpdateWithBuilderBlock:(void (^ _Nonnull)(VMECameraUpdateBuilder * _Nonnull))builderBlock SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VMEViewMode : NSInteger;

/// Used to build a VMECameraUpdate object.
/// version:
/// 1.7
SWIFT_CLASS("_TtC18VisioMoveEssential22VMECameraUpdateBuilder")
@interface VMECameraUpdateBuilder : NSObject
/// note:
/// For more info, VMECameraUpdate.targets.
/// version:
/// 1.7
@property (nonatomic, copy) NSArray<NSObject *> * _Null_unspecified targets;
/// note:
/// For more info, VMECameraUpdate.viewMode.
/// version:
/// 1.7
@property (nonatomic) enum VMEViewMode viewMode;
/// note:
/// For more info, VMECameraUpdate.heading.
/// version:
/// 1.7
@property (nonatomic, strong) VMECameraHeading * _Null_unspecified heading;
/// note:
/// For more info, VMECameraUpdate.paddingTop.
/// version:
/// 1.7
@property (nonatomic) double paddingTop;
/// note:
/// For more info, VMECameraUpdate.paddingBottom.
/// version:
/// 1.7
@property (nonatomic) double paddingBottom;
/// note:
/// For more info, VMECameraUpdate.paddingLeft.
/// version:
/// 1.7
@property (nonatomic) double paddingLeft;
/// note:
/// For more info, VMECameraUpdate.paddingRight.
/// version:
/// 1.7
@property (nonatomic) double paddingRight;
/// note:
/// For more info, VMECameraUpdate.pitch.
/// version:
/// 1.18
@property (nonatomic, strong) VMECameraPitch * _Null_unspecified pitch;
/// note:
/// For more info, VMECameraUpdate.distanceRange.
/// version:
/// 1.18
@property (nonatomic, strong) VMECameraDistanceRange * _Null_unspecified distanceRange;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential11VMECategory")
@interface VMECategory : NSObject
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Callback protocol for receiving compass state events.
/// version:
/// 2.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential18VMECompassListener_")
@protocol VMECompassListener <NSObject>
/// Notified when compass state changes.
/// version:
/// 2.0
/// \param state Boolean with actual compass state
///
- (void)compassStateChangedWithState:(BOOL)state;
@end

@class VMERouteRequest;
@class VMERouteResult;

/// Callback protocol for receiving compute route results.  For computing a route see VMEMapController::computeRoute:callback:.
/// version:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential23VMEComputeRouteCallback_")
@protocol VMEComputeRouteCallback <NSObject>
/// Notified when compute route was successful
/// version:
/// 1.2
/// \param mapController The map view who received the compute route request
///
/// \param routeRequest The original route request object.
///
/// \param routeResult The results of the route request.
///
///
/// returns:
/// true if the route should be added to the map, otherwise false.
- (BOOL)computeRouteDidFinishWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMERouteRequest * _Nonnull)routeRequest result:(VMERouteResult * _Nonnull)routeResult SWIFT_WARN_UNUSED_RESULT;
/// Notified when compute route failed.
/// version:
/// 1.0
/// \param mapController The map view who received the compute route request
///
/// \param routeRequest The original route request object.
///
/// \param error A localized error string indicating the reason for the failure.
///
- (void)computeRouteDidFailWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMERouteRequest * _Nonnull)routeRequest error:(NSString * _Nonnull)error;
@end

/// This enum defines the possible floor transition type.
/// A transition type determines how the route will change floor
/// version:
/// 1.22
typedef SWIFT_ENUM(NSInteger, VMEFloorTransitionType, open) {
/// Floor transition will occur by stairway
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeStairWay = 0,
/// Floor transition will occur by elevator
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeElevator = 1,
/// Floor transition will occur by escalator
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeEscalator = 2,
/// Floor transition will occur by an unknown mean
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeUnknown = 3,
/// There is no floor transition
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeNone = 4,
};


SWIFT_CLASS("_TtC18VisioMoveEssential14VMEInstruction")
@interface VMEInstruction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An immutable class representing a pair of latitude and longitude coordinates, stored as degrees.
/// version:
/// 1.24
SWIFT_CLASS("_TtC18VisioMoveEssential9VMELatLng")
@interface VMELatLng : NSObject
/// The objects latitude
/// version:
/// 1.24
@property (nonatomic) double latitude;
/// The objects longitude
/// version:
/// 1.24
@property (nonatomic) double longitude;
/// Compares this VMELatLng to the specified object.
/// version:
/// 1.24
/// \param other The VMELatLng to compare this object against.
///
///
/// returns:
/// true if this VMELatLng represents the same lat lng as the specified object, false otherwise.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Interface definition of methods that are invoked when life cycle events occur
/// version:
/// 1.12
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     
///     mMapController.loadMapData()
///     mMapController.setLifeCycleListener(self)
/// }
/// func mapDidInitializeEngine(mapController: VMEMapController) {
///    // ...
///     return true
/// }
///
/// func mapDataDidLoad(mapController: VMEMapController, venueData: [String:Any]) {
/// }
///
/// func mapViewDidLoad(mapController: VMEMapController) {
/// }
///
/// func mapDidGainFocus(mapController: VMEMapController) {
/// }
///
/// func mapDidDisplayRoute(mapController: VMEMapController,result: VMERouteResult) {
/// }
///
/// func mapDidDisplayPoiInfo(mapController: VMEMapController, poiID: String) {
/// }
///
/// func mapDidDisplaySearch(mapController: VMEMapController) {
/// }
///
/// func mapDidDisplayRouteSetup(mapController: VMEMapController) {
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMELifeCycleListener_")
@protocol VMELifeCycleListener <NSObject>
@optional
/// Invoked when the 3D rendering engine has been initialized
/// version:
/// 1.13
/// \param mapController The originator of the notification
///
- (void)mapDidInitializeEngineWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the map bundle has been loaded and is ready to gain focus
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDataDidLoadWithMapController:(VMEMapController * _Nonnull)mapController venueData:(NSDictionary<NSString *, id> * _Nonnull)venueData;
/// Invoked when the map bundle has been loaded and is ready to gain focus
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapViewDidLoadWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the map has returned to normal focus.
/// note:
///
/// Normal focus indicates that:
/// - the map surfaces have been loaded and
/// - no other views appear above the map.
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidGainFocusWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when a route is displayed within the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
/// \param result The result object containing information related to the displayed route
///
- (void)mapDidDisplayRouteWithMapController:(VMEMapController * _Nonnull)mapController result:(VMERouteResult * _Nonnull)result;
/// Invoked when the poi info is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
/// \param poiID The poi ID of the poi info being displayed
///
- (void)mapDidDisplayPoiInfoWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID;
/// Invoked when the search view is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidDisplaySearchWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the route setup view is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidDisplayRouteSetupWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when an error occured
/// version:
/// 2.0
/// \param mapController The originator of the notification
///
- (void)mapErrorWithError:(NSString * _Nonnull)error;
@end


/// A VMELocation object incorporates the position within the map as well as values indicating the accuracy of the measurements and the bearing in which the location is moving.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential11VMELocation")
@interface VMELocation : NSObject <NSCopying>
/// The physical position within the map.
/// version:
/// 1.2
@property (nonatomic, readonly, strong) VMEPosition * _Null_unspecified position;
/// Horizontal accuracy.  The radius of uncertainty for the location, measured in meters.
/// version:
/// 1.2
@property (nonatomic, readonly) double accuracy;
/// The direction in which the device is traveling.
/// version:
/// 1.2
@property (nonatomic, readonly) double bearing;
/// Instantiate a new instance of VMELocation
/// version:
/// 1.2
/// \param position The position of the location.  The position is represented graphically within the map.
///
/// \param bearing The bearing of the location. The bearing is used to orient the camera when location tracker is enabled. Negative values will be ignored.
///
/// \param accuracy The radius of uncertainty for the location, measured in meters.  The accuracy is represented graphically within the map.  Negative values will be ignored.
///
///
/// returns:
/// A new VMELocation object.
- (nonnull instancetype)initWithPosition:(VMEPosition * _Nullable)position bearing:(double)bearing accuracy:(double)accuracy OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

/// The tracking mode controls the location tracking
/// version:
/// 1.19
typedef SWIFT_ENUM(NSInteger, VMELocationTrackingMode, open) {
/// In none mode, the following occurs:
/// There is no location tracking
/// version:
/// 1.19
  VMELocationTrackingModeNone = 0,
/// In custom mode, the following occurs:
/// Use a custom location tracker provided by the integrators
/// version:
/// 1.19
  VMELocationTrackingModeCustom = 1,
/// In follow mode , the following occurs:
/// Use the location tracker provided by the SDK
/// version:
/// 1.19
  VMELocationTrackingModeFollow = 2,
};


/// Interface definition of methods that are invoked when location tracking mode related events occur.
/// version:
/// 1.19
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundle"
///         builder.mapHash = "mc8f3fec89d2b7283d15cfcf4eb28a0517428f054"
///         builder.mapSecretCode = 0
///     })
///     mMapController.loadMapData()
///     
///     mMapController.setLifeCycleListener(self)
///     mMapController.setLocationTrackingModeListener(self)
/// }
///
/// func mapDidUpdateTrackingMode(mapController: VMEMapController,trackingMode: VMELocationTrackingMode) {
///    // ...
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential31VMELocationTrackingModeListener_")
@protocol VMELocationTrackingModeListener <NSObject>
@optional
/// Notifies the listener that the tracking mode has been updated.
/// version:
/// 1.19
/// \param mapController The originator of the notification
///
/// \param locationTrackingMode The new tracking mode
///
- (void)mapDidUpdateTrackingModeWithMapController:(VMEMapController * _Nonnull)mapController trackingMode:(enum VMELocationTrackingMode)trackingMode;
@end

typedef SWIFT_ENUM(NSInteger, VMEManeuverType, open) {
  VMEManeuverTypeUnknown = 0,
/// Go straight
/// version:
/// 1.17
  VMEManeuverTypeGoStraight = 1,
/// Turn gentle right
/// version:
/// 1.17
  VMEManeuverTypeTurnGentleRight = 2,
/// Turn gentle left
/// version:
/// 1.17
  VMEManeuverTypeTurnGentleLeft = 3,
/// Turn right
/// version:
/// 1.17
  VMEManeuverTypeTurnRight = 4,
/// Turn left
/// version:
/// 1.17
  VMEManeuverTypeTurnLeft = 5,
/// Turn sharp right
/// version:
/// 1.17
  VMEManeuverTypeTurnSharpRight = 6,
/// Turn sharp left
/// version:
/// 1.17
  VMEManeuverTypeTurnSharpLeft = 7,
/// U-turn right
/// version:
/// 1.17
  VMEManeuverTypeUTurnRight = 8,
/// U-turn left
/// version:
/// 1.17
  VMEManeuverTypeUTurnLeft = 9,
/// Start
/// version:
/// 1.17
  VMEManeuverTypeStart = 10,
/// End
/// version:
/// 1.17
  VMEManeuverTypeEnd = 11,
/// Go up
/// version:
/// 1.17
  VMEManeuverTypeGoUp = 12,
/// Go down
/// version:
/// 1.17
  VMEManeuverTypeGoDown = 13,
/// Change modality
/// version:
/// 1.17
  VMEManeuverTypeChangeModality = 14,
/// Change layer
/// version:
/// 1.17
  VMEManeuverTypeChangeLayer = 15,
/// Waypoint
/// version:
/// 1.17
  VMEManeuverTypeWaypoint = 16,
};

@class VMEMapControllerBuilder;
@class VMEMapDescriptor;
@class VMEMapView;
@protocol VMEMapListener;
@protocol VMEPoiListener;
@protocol VMENavigationListener;
@class VMESceneUpdate;
@class UIColor;
@class VMEPoiSize;
@class VMEPoiFilter;
@protocol VMEPoiFilterCallback;
@class VMEPoi;
@class CLLocation;
@protocol VMESearchViewCallback;
@class UIView;
@class UIImage;

/// This is the main class of VisioMove Essential for iOS and is the entry point for all methods related to the map.
/// <ul>
///   <li>
///     Description: The map controller can be created with the <em>initController</em> class method and calling <em>loadMapData</em> method on it.
///   </li>
/// </ul>
/// \code
/// mMapController = VMEMapController.initController(builderBlock: { builder in
///     builder.mapPath = "MapBundleTheme"
///     builder.mapSecretCode = 0
/// })
/// mMapController.loadMapData();
///
/// \endcodeVMEMapController can only be read and modified from the main thread, similar
/// to all UIKit objects. Calling these methods from another thread will result in
/// an exception or undefined behavior.
/// version:
/// 2.0
SWIFT_CLASS("_TtC18VisioMoveEssential16VMEMapController")
@interface VMEMapController : NSObject
/// Loads map controller
/// This method must be called at least once in order for the controller to be loaded.
/// \code
/// mMapController = VMEMapController.initController(builderBlock: { builder in
///     builder.mapPath = "MapBundleTheme"
///     builder.mapSecretCode = 0
/// })
///
/// \endcodeversion:
/// 1.0
/// \param builderBlock represents a method called to build the block
///
/// \param builder closure returning builder for mapController
///
///
/// returns:
///
/// <ul>
///   <li>
///     Void
///   </li>
/// </ul>
+ (nonnull instancetype)initControllerWithBuilderBlock:(void (^ _Nonnull)(VMEMapControllerBuilder * _Nonnull))builderBlock SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Loads the map data using the current map configuration.  If the map is already loaded,
/// this will reload the map.
/// This method must be called at least once in order for the map to be loaded.
/// note:
/// If the map is already loaded, then VMEMapController::unloadMap should be called before calling
/// this method again.
/// version:
/// 2.0
///
/// returns:
/// Void
- (void)loadMapData;
/// Sets the directory path, relative to the main bundle, where the embedded map bundle will be loaded from.
/// version:
/// 1.0
/// \param pMapPath path
///
- (void)setMapPath:(NSString * _Nonnull)pMapPath;
/// Sets the target hash of the online map.
/// The hash is used for retrieving the map from a map server.
/// version:
/// 1.0
/// \param pMapHash hash
///
- (void)setMapHash:(NSString * _Nonnull)pMapHash;
/// Sets the embedded map’s secret code.
/// note:
/// The secret code is used to salt the map’s license.  Before authorizing the loading of the map, the secret code is validated with the map’s license.
/// version:
/// 1.0
/// version:
/// 1.9 Parameter type changed from String to int
/// \param pMapSecretCode secret code
///
- (void)setMapSecretCode:(NSInteger)pMapSecretCode;
/// Sets the map server url.
/// note:
/// If nil, the default map server path will be used. By default the map server URL is “https://mapserver.visioglobe.com”
/// version:
/// 1.0
/// \param pMapServerUrl url
///
- (void)setMapServerURL:(NSString * _Nonnull)pMapServerUrl;
/// Determines whether to prompt the user before downloading an online map.
/// If true, the user will be prompted.  Otherwise the online map will be downloaded automatically.
/// note:
/// By default this is set to true (i.e. the user will be prompted).
/// version:
/// 1.9
/// \param pEnable true or false
///
- (void)setPromptUserToDownloadMapWithEnable:(BOOL)enable;
/// Get cached Map descriptor
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.21
/// \code
/// let validMapHash = "me0ec793d46c4a804d5a4d1cc382c97719c0b54ac"
/// let mapDescriptor = mMapController?.getCachedMapDescriptor(identifier: validMapHash)
///
/// \endcode\param identifier The map hash who’s map descriptor is to be retrieved.
///
///
/// returns:
/// The map bundle descriptor that has been downloaded by the SDK. Will return nil if the map hash doesn’t have a corresponding downloaded map within the phone.
- (VMEMapDescriptor * _Nullable)getCachedMapDescriptorWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Deletes a map from the application that has been cached by the SDK.
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.21
/// \code
/// let validMapHash = "me0ec793d46c4a804d5a4d1cc382c97719c0b54ac"
/// do {
///    let ret = mMapController?.deleteCachedMap(identifier: validMapHash)
/// catch let error as NSError {
///     print(error)
/// }
///
/// \endcode\param identifier The map hash associated with the cached map that is to be deleted.
///
/// \param error Any information about an error condition that may have occured.
///
///
/// returns:
/// Returns true if the map was successfully deleted, otherwise false.
- (BOOL)deleteCachedMapWithIdentifier:(NSString * _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error;
/// Retrieve the current version of VisioMove Essential (iOS).
/// version:
/// 1.0
///
/// returns:
/// String
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the minimum version string major.minor.patch of the data that this
/// SDK can handle.
/// version:
/// 1.0
/// <ul>
///   <li>
///     Description: In other words, the map bundle must have been generated with
///     at least this SDK version, otherwise it will not be loaded.  You can find the
///     sdk_version that a map bundle was generated with within its descriptor.json file.
///   </li>
/// </ul>
///
/// returns:
/// String
- (NSString * _Nonnull)getMinDataSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the version string major.minor.patch of the data that this
/// SDK can handle.
/// version:
/// 1.21
/// <ul>
///   <li>
///     Description:
///     In other words, the map bundle’s minimum supported SDK must be less than or equal to this SDK version,
///     otherwise it will not be loaded.  You can find the sdk_min_version that a map bundle was generated
///     with within its descriptor.json file.
///   </li>
/// </ul>
///
/// returns:
/// String
- (NSString * _Nonnull)getDataSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Links MapView to map data when loaded.
/// note:
/// If the map data is already loaded, then map view will be displayed immediatly.
/// if the map data is not already loaded, then mapController will keep a reference of this View,
/// and map will be displayed as soon as map data is loaded.
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description: This method must be called at least once in order for the map to be viewed.
///   </li>
/// </ul>
/// \param mapView the VMEMapView which will display map
///
///
/// returns:
/// Void
- (void)loadMapViewWithMapView:(VMEMapView * _Nonnull)mapView;
/// Unloads the current map view.
/// note:
/// Only call once the previous map has finished loadMapView.
/// version:
/// 1.9
/// <ul>
///   <li>
///     Description: Unloading the map will undo any API calls requiring view made since the map is visible.
///   </li>
/// </ul>
///
/// returns:
/// Void
- (void)unloadMapView;
/// Unload map data
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description: This method unloads map data.
///   </li>
/// </ul>
///
/// returns:
/// Void
- (void)unloadMapData;
/// Set delegate to receive map related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param mapListener The listener delegate to receive notifications. Can be null.
///
- (void)setMapListener:(id <VMEMapListener> _Nonnull)mapListener;
/// Set delegate to receive building related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 1.17
/// \param buildingListener The listener delegate to receive notifications. Can be null.
///
- (void)setBuildingListener:(id <VMEBuildingListener> _Nonnull)buildingListener;
/// Set map listener delegate to receive location tracking mode related notifications.
/// version:
/// 1.19
/// \param locationTrackingModeListener The listener delegate to receive notifications. Can be null.
///
- (void)setLocationTrackingModeListener:(id <VMELocationTrackingModeListener> _Nonnull)locationTrackingModeListener;
/// Sets a listener that is invoked repeatedly while the camera is in motion.
/// version:
/// 1.24
/// note:
/// The listener may be invoked as often as once every frame and should not perform expensive operations.
/// \param cameraListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setCameraListener:(id <VMECameraListener> _Nonnull)cameraListener;
/// Sets a delegate to receive life cycle related notifications.
/// version:
/// 1.12
/// note:
/// To unset the listener, use nil.
/// \param lifeCycleListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setLifeCycleListener:(id <VMELifeCycleListener> _Nonnull)lifeCycleListener;
/// Sets a  delegate to receive poi related notifications.
/// version:
/// 1.12
/// note:
/// To unset the listener, use nil.
/// \param poiListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setPoiListener:(id <VMEPoiListener> _Nonnull)poiListener;
/// Set delegate to receive navigation related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param navigationListener The listener delegate to receive notifications. Can be null.
///
- (void)setNavigationListener:(id <VMENavigationListener> _Nonnull)navigationListener;
/// Set index for instruction.
/// version:
/// 2.0
/// \param instructionIndex The index for current instruction
///
- (void)setNavigationIndex:(NSInteger)navigationIndex;
/// Set delegate to receive compass related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param compassListener The listener delegate to receive notifications. Can be null.
///
- (void)setCompassListener:(id <VMECompassListener> _Nonnull)compassListener;
/// Repositions the camera according to the instructions defined in the update.
/// The update is instantaneous.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingCurrent()
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
///
/// mMapController.updateCamera(lUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)updateCamera:(VMECameraUpdate * _Nonnull)update;
/// Animates the movement of the camera from the current position to the position defined in the update.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingWithPoiID(poiID: "B2")
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
/// mMapController.animateCamera(lUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)animateCamera:(VMECameraUpdate * _Nonnull)update;
/// Animates the movement of the camera from the current position to the position defined in the update.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.7
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingWithPoiID(poiID: "B2")
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
/// mMapController.animateCamera(lUpdate, duration: 0.7, callback: self)
///
/// \endcode\param update The <em>update</em> to apply.
///
/// \param duration The <em>duration</em> (in seconds) of the camera animation.
///
/// \param callback The <em>callback</em> to be notified of any animation events.  Can pass nil if indifferent to animation events.
///
- (void)animateCamera:(VMECameraUpdate * _Nonnull)update duration:(double)duration callback:(id <VMEAnimationCallback> _Nullable)callback;
/// Updates the change of scene from the current scene to the scene defined in the update.  The update is instantaneous.
/// note:
/// See VMESceneUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lSceneUpdate = VMESceneUpdate.sceneUpdate(viewMode: VMEViewMode.floor, floorID:"B2-UL00")
/// mMapController.updateScene(lSceneUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)updateScene:(VMESceneUpdate * _Nonnull)update;
/// Updates the change of scene from the current scene to the scene defined in the update.  The update is instantaneous.
/// note:
/// See VMESceneUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lSceneUpdate = VMESceneUpdate.sceneUpdate(viewMode: VMEViewMode.floor, floorID:"B2-UL00")
/// mMapController.animateScene(lSceneUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)animateScene:(VMESceneUpdate * _Nonnull)update;
/// Set focus on map - map state
/// note:
/// calling setFocusOnMap() close other view components such as the navigation, the search view or the poi info view… The map is clean from other views.
/// version:
/// 1.19
/// \code
/// mMapController.setFocusOnMap()
///
/// \endcode
- (void)setFocusOnMap;
/// Gets the current context of the camera.
/// The VMECameraContext returned is a snapshot of the current context, and will not automatically update when the camera moves.
/// version:
/// 1.24
///
/// returns:
/// The current camera context
- (VMECameraContext * _Nullable)getCameraContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the last move reason of the camera.
/// version:
/// 1.25
///
/// returns:
/// The last camera move reason
- (enum VMECameraMoveReason)getCameraMoveReason SWIFT_WARN_UNUSED_RESULT;
/// Requests that a route be computed.
/// version:
/// 1.0
/// version:
/// 1.2 The callback parameter is now required by this method in order to handle the result.
/// \code
/// let lRouteRequest = VMERouteRequest(requestType: VMERouteRequestType.fastest, destinationsOrder: VMERouteDestinationsOrder.optimal, accessible: true)
/// lRouteRequest.setOrigin("B1-UL00-ID0039")
/// let _ = lRouteRequest.addDestinations(["B4-UL04-ID0005", "B3-LL01-ID0004"])
///
/// mMapController.computeRoute(lRouteRequest, callback: self)
///
/// \endcode\param routeRequest The <em>route</em> request.
///
/// \param callback The <em>callback</em> to invoke with the result.
///
- (void)computeRoute:(VMERouteRequest * _Nonnull)routeRequest callback:(id <VMEComputeRouteCallback> _Nullable)callback;
/// Get modalities
/// version:
/// 1.6
/// \code
/// var lModalities = mMapController.getModalities()
///
/// \endcode
/// returns:
/// An array of all modality names that are present within the map’s routing network.
- (NSArray<NSString *> * _Nonnull)getModalities SWIFT_WARN_UNUSED_RESULT;
/// Get modalities
/// version:
/// 1.6
/// \code
/// var lModalities = mMapController.getAttributes()
///
/// \endcode
/// returns:
/// An array of all modality names that are present within the map’s routing network.
- (NSArray<NSString *> * _Nonnull)getAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)setExcludedModalities:(NSArray<NSString *> * _Nonnull)modalities;
/// Sets the modalities that will be excluded from the routing network when a route is computed.
/// note:
/// The set excluded modalities will be used in addition to the accessible excluded modalities if the user chooses an accessible route.
/// version:
/// 1.6
/// \code
/// mMapController.setExcludedModalities(["UserProfile1", "UserProfile2"]])
///
/// \endcode\param modalities An array of modality names to be excluded.  If nil or empty, then any previously excluded modalities will be removed.
///
- (void)setExcludedAttributes:(NSArray<NSString *> * _Nonnull)attributes;
/// Update the poi’s color.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// version:
/// 1.7 Now also applies to static poi icons and  pois.
/// \param poiID The poi ID who’s data is to change
///
/// \param color The color to apply to the poi.
///
///
/// returns:
/// true if the pois data was updated, otherwise false.
- (BOOL)setPoiColor:(NSString * _Nonnull)poiID color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Reset the poi’s color back to it’s initial value.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// version:
/// 1.8 Now also applies to icons and pois.
/// \param poiID The poi ID who’s data is to change
///
///
/// returns:
/// true if the pois data was updated, otherwise false.
- (BOOL)resetPoiColorWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Adds or update some POIs on the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// note:
/// Json must be formatted like this:
/// {
/// “PoiID_1”: {
/// “name”: “The name of the POI - label on surface and name search / Place information / routing “,
/// “description”: “Used in place Information”,
/// “categories: [“CategoryID_1”, “CategoryID_2”,”…” ], // Array of categoryID String
/// “icon”: “String: path to icon used on place information / search / routing - PNG file - can be an relative path, or an url like http://, https://, data:image/png;base64,”,
/// “features”: {
/// “surface”: {“color”:”#0000FF - color in hexadecimal format starting by #”},
/// “image”: {
/// “icon”: “String: path to icon used on map - can be an relative path, or an url like http://, https://, data:image/png;base64,”,
/// “scale”:1.0, // Double - Icon size on map
/// “position”:[45.74094,4.88483,0.0], // Array of Double:  Lat, Lon, Alt
/// “orientation”:[
/// “facing | fixedWithHeading | flat”, // facing: Place is always camera facing, fixedWithHeading: Place is flat on ground and has a fixed heading, flat: Place is flat on ground and facing camera
/// 30.0  // if fixedWithHeading, needs a Double after
/// ],
/// “anchorMode”: “topLeft” | “topCenter” | “topRight” | “centerLeft” | “center” | “centerRight” | “bottomLeft” | “bottomCenter” | “bottomRight” , // An anchor mode determines how an object is anchored to a given position within the map
/// “altitudeMode”:“relative” | “absolute”, // relative :The altitude is interpreted relative to the terrain, absolute: The altitude is interpreted as the height above the WGS84 ellipsoid.
/// “displayMode”:“overlay” | “inlay”, // inlay: The place will obscured when located behind map surfaces, overlay: The place is displayed on top of all map surfaces, regardless of whether they are physical infront of the place.
/// “visibilityRamp”:[2.0,5.0,2000.0,5000.0] // Array of 4 Double [startVisible, fullyVisible, startInvisible, fullyInvisible]
/// }
/// }
/// },
/// “PoiID_2”: {}
/// }
/// version:
/// 2.0
/// \code
/// let poiData = """
///     {
///        "samplePoiID":{
///           "name":"Cat - Map bundle",
///           "description":"<b>Map Bundle</b> <hr> The icon comes from the map bundle.",
///           "categories":["2", "3", "99"],
///           "icon":"/media/map/visio_island_essentials/category_exhibition.png",
///           "features":{
///
///              "surface": {"color":"#0000FF"},
///
///              "image":{
///                 "icon":"/media/map/visio_island_essentials/category_exhibition.png",
///                 "scale":1.0,
///                 "position":[45.74094,4.88483,0.0],
///                 "orientation":[
///                    "facing",
///                    30.0
///                 ],
///                 "anchorMode":"bottomCenter",
///                 "altitudeMode":"relative",
///                 "displayMode":"overlay",
///                 "visibilityRamp":[2.0,5.0,2000.0,5000.0]
///              }
///           }
///        }
///        """
/// let result = self.mMapController.setPois(data: poiData)
///
/// \endcode\param data a JSON string
///
///
/// returns:
/// a dictionary of errors or warnings.
- (NSDictionary<NSString *, id> * _Nonnull)setPoisWithData:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Adds or update some categories.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// note:
/// Json must be formatted like this:
/// {
/// “CategoryID_1”: {
/// “name”: “A String”,
/// “icon”: “String: path to icon used on map - can be an relative path, or an url like http://, https://, data:image/png;base64,”
/// },
/// “CategoryID_2”: {}
/// }
/// version:
/// 2.0
/// \code
/// let categoryData = """
///     {
///         "CategogyID": {
///             "name": "The name",
///             "icon": "media/map/visio_island_essentials/category_service.png"
///         }
///    }
///    """
/// let result = self.mMapController.setCategories(data: categoryData)
///
/// \endcode\param data a JSON string
///
///
/// returns:
/// a dictionary of errors or warnings.
- (NSDictionary<NSString *, id> * _Nonnull)setCategoriesWithData:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Set a group of poi colors in one call.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.15
/// \param poiIDToColor A dictionary of poiID to color.
///
///
/// returns:
/// true if all poi colors were updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisColorWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs colors:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// Reset a group of pois to their original colors in one call.
/// The color reset is batched.  The map will be non-responsive while the surface colors are being reset.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.15
/// \param poiIDs An array of poiIDs to be reset.
///
///
/// returns:
/// true if all poi colors were updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)resetPoisColorWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs SWIFT_WARN_UNUSED_RESULT;
/// Remove the poi from the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be removed.
///
///
/// returns:
/// true if the poi was removed, otherwise false.
- (BOOL)removePoiWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Remove the pois from the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of ID reprensenting the pois to be removed.
///
///
/// returns:
/// array of Boolean : true if the poi was removed, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)removePoisWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs SWIFT_WARN_UNUSED_RESULT;
/// Update the poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be moved.
///
/// \param position The poi’s new position
///
/// \param animated Determines whether the change should be animated.
///
///
/// returns:
/// true if the poi’s position was updated, otherwise false.
- (BOOL)setPoiPositionWithPoiID:(NSString * _Nonnull)poiID position:(VMEPosition * _Nonnull)position animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Update multiple poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of IDs of the poi to be removed.
///
/// \param positions An array of poi’s new position
///
/// \param animated An array of boolean: Determines whether the change should be animated.
///
///
/// returns:
/// an Array of Boolean: true if the poi’s position was updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisPositionWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs positions:(NSArray<VMEPosition *> * _Nonnull)positions animated:(NSArray<NSNumber *> * _Nonnull)animated SWIFT_WARN_UNUSED_RESULT;
/// Update the poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be scaled.
///
/// \param size Update the poi’s size.
///
/// \param animated Determines whether the change should be animated.
///
///
/// returns:
/// true if the poi’s size was updated, otherwise false.
- (BOOL)setPoiSizeWithPoiID:(NSString * _Nonnull)poiID size:(VMEPoiSize * _Nonnull)size animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Update multiple poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of ID of the poi to be scaled.
///
/// \param sizes Array of poi’s size.
///
/// \param animated Array of Boolean: Determines whether the change should be animated.
///
///
/// returns:
/// Array of Boolean: true if the poi’s size was updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisSizeWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs sizes:(NSArray<VMEPoiSize *> * _Nonnull)sizes animated:(NSArray<NSNumber *> * _Nonnull)animated SWIFT_WARN_UNUSED_RESULT;
/// Queries all poi IDs within the map.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidInitializeEngine: notification
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.4
///
/// returns:
/// An array of poi IDs within the map.  Will return an empty array if called before the map has correctly loaded.
- (NSArray<NSString *> * _Nonnull)queryAllPoiIDs SWIFT_WARN_UNUSED_RESULT;
- (void)queryPoisWith:(VMEPoiFilter * _Nonnull)filter callback:(id <VMEPoiFilterCallback> _Nullable)callback;
/// Returns a requested poi.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.10
/// \param poiID The ID of the poi to return.
///
///
/// returns:
/// A poi object that corresponds to the poi ID, or null if ID doesn’t exist.
- (VMEPoi * _Nullable)getPoiWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Queries all category IDs within the map.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.10
///
/// returns:
/// An array of category IDs within the map.  Will return an empty array if called before the map has correctly loaded.
- (NSArray<NSString *> * _Nonnull)queryAllCategoryIDs SWIFT_WARN_UNUSED_RESULT;
/// Returns a requested category.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     categories
///   </li>
/// </ul>
/// version:
/// 1.10
/// \param categoryID The ID of the category to return.
///
///
/// returns:
/// A category object that corresponds to the category ID, or null if ID doesn’t exist.
- (VMECategory * _Nullable)getCategoryWithCategoryID:(NSString * _Nonnull)categoryID SWIFT_WARN_UNUSED_RESULT;
/// Returns a poi’s center position.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.16
/// \param poiID The ID of the poi in question
///
///
/// returns:
/// The poi’s center position.
- (VMEPosition * _Nullable)getPoiPositionWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Returns The poi’s bounding box.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.16
/// \param poiID The ID of the poi in question
///
///
/// returns:
/// An array of positions that represent the pois bounding box
- (NSArray<VMEPosition *> * _Nonnull)getPoiBoundingPositionsWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Updates the uses current physical location within the map.
/// note:
/// Calls to this method before VMELifeCycleListener::mapDidLoad: is called will be ignored.
/// version:
/// 1.0
/// version:
/// 1.2 Change update parameter from CLLocation to VMELocation.
/// \code
///     func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
///         if let lCLLocation = locations.last{
///             mLocation = mMapController.createLocationFromLocation(lCLLocation)
///             mMapController.updateLocation(mLocation)
///         }
///     }
///
/// \endcode\param update The location update to apply.  If nil is passed, then the current location will be removed from the map.
///
///
/// returns:
/// A category object that corresponds to the category ID, or null if ID doesn’t exist.
- (void)updateLocation:(VMELocation * _Nullable)update;
/// Takes a native location object and converts it to a VisioMove Essential object.
/// Uses the geo-fences within the map bundle to determine if the location falls within a building and if so, what floor.
/// note:
/// The CLLocation’s floor property is currently ignored.  Please use the altitude property to determine the physical floor.
/// note:
/// By setting the CLLocation’s verticalAccuracy to -1, the VMELocation will be forced to the outside (independent of whether it falls within a building’s geo-fence).
/// note:
/// This method will return nil if called prior to VMELifeCycleListener::mapDidLoad:.
/// version:
/// 1.2
/// \param location A location object.  The ‘altitude’ attribute will be used to determine the correct floor.
///
///
/// returns:
/// A VMELocation indicating the location within the venue, or nil if the location is invalid or does exist not within the venue.
- (VMELocation * _Nullable)createLocationFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Takes a native location object and converts it to a VisioMove Essential object.
/// Uses the geo-fences within the map bundle to determine if the location falls within a builing and if so, what floor.
/// note:
/// By setting the CLLocation’s verticalAccuracy to -1, the VMEPosition will be forced to the outside (independent of whether it falls within a building’s geo-fence).
/// note:
/// This method will return nil if called prior to VMELifeCycleListener::mapDidLoad:.
/// version:
/// 1.2
/// \param location A location object.  The ‘altitude’ attribute will be used to determine the correct floor.
///
///
/// returns:
/// A VMEPosition indicating the location within the venue, or nil if the location is invalid or does not exist within the venue.
- (VMEPosition * _Nullable)createPositionFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Change the value of the location tracking mode
/// note:
/// This method will do nothing if there is no location provided to the mapView
/// note:
/// see VMELocationTrackingMode
/// version:
/// 1.19
/// \param trackingMode A tracking mode that will be applied immediately
///
///
/// returns:
/// A VMEPosition indicating the location within the venue, or nil if the location is invalid or does not exist within the venue.
- (void)setLocationTrackingMode:(enum VMELocationTrackingMode)trackingMode;
- (void)setLocationTrackingButtonToggleModes:(NSArray<NSString *> * _Nonnull)trackingModes;
- (enum VMELocationTrackingMode)getLocationTrackingMode SWIFT_WARN_UNUSED_RESULT;
/// Get the current location tracking mode
/// note:
/// see VMELocationTrackingMode
/// version:
/// 1.19
///
/// returns:
/// The current tracking mode, default is ::VMELocationTrackingModeNone
- (NSArray<NSString *> * _Nonnull)getLocationTrackingButtonToggleModeStrings SWIFT_WARN_UNUSED_RESULT;
/// Control whether the selector view is visible.  If the selector view is not visible, it will be the integrator’s responsibility to provide a floor change mechanism.
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.9
/// \param visible If true, then the selector view will be visible.  Otherwise, the selector view will be hidden.
///
- (void)setSelectorViewVisible:(BOOL)visible;
/// Gets visibility of selector view.
/// note:
/// see For more info VMEMapView::setSelectorViewVisible:
/// version:
/// 1.9
///
/// returns:
/// A boolean indicating whether the selector view is visible or not.
- (BOOL)getSelectorViewVisible SWIFT_WARN_UNUSED_RESULT;
/// Control whether the navigation header view is visible.  If the navigation header view is not visible, it will be the integrator’s responsibility to provide a mechanism for the end user to close the navigation in progress.
/// note:
/// to close the navigation in progress without the navigation header, use the method mapView.setFocusOnMap()
/// note:
/// VMEMapInterface::setFocusOnMap();
/// version:
/// 1.19
/// \param visible If true, , then the navigation header view will be visible when a navigation is in progress.  Otherwise, the navigation header iew will be hidden.
///
- (void)setNavigationHeaderViewVisible:(BOOL)visible;
/// Gets navigation header view visibility.
/// note:
/// see For more info VMEMapView::setSelectorViewVisible:
/// version:
/// 1.9
///
/// returns:
/// A boolean indicating whether the navigation view will be visible when a navigation is in progress.
- (BOOL)getNavigationHeaderViewVisible SWIFT_WARN_UNUSED_RESULT;
/// showSearchViewWithTitle: Display search view with title
/// version:
/// 1.0
/// \code
///    showSearchViewWithTitle("Search Title", {})
///
/// \endcode\param title The <em>title</em> component of the vector.
///
/// \param callback The <em>callback</em> called at the end of displaying search view
///
///
/// returns:
/// Void
- (void)showSearchViewWithTitle:(NSString * _Nonnull)title callback:(id <VMESearchViewCallback> _Nullable)callback;
/// Overrides the map’s default font (currently DejaVuSans.ttf).
/// note:
/// Should be called within the VMELifeCycleListener::mapDidInitializeEngine: notification.
/// version:
/// 1.13
/// \code
/// let lFontFile = Bundle.main.path(forResource: "artifika_regular", ofType: "ttf")!;
/// let _ = mMapController.setMapFont(lFontFile);
///
/// \endcode\param filePath The TrueType Font file (*.ttf) to load. The font will be searched locally in the map bundle’s “config” directory otherwise use an absolute path.
///
///
/// returns:
/// true if the font file was set successfully, otherwise no.
- (BOOL)setMapFontWithFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// Displays info related to the poi
/// version:
/// 1.19
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Focus the camera on the poi
///       </li>
///       <li>
///         Open the poi info view.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.showPoiInfo(poiID: "B1-UL00-ID0039")
///
/// \endcode\param poiID The poi whos information will be displayed.
///
- (void)showPoiInfoWithPoiID:(NSString * _Nonnull)poiID;
/// Adds a native overlay view above the map that’s associated with a position.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let lPos = VMEPosition(latitude: 45.74271, longitude: 4.88076, altitude: 0, scene: VMESceneContext(buildingID: "B4", floorID: "B4-UL01"))
///    let _ = mMapController.addOverlayViewID("Overlay4", view: lView, position: lPos)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param position The position to which the overlay view will be anchored.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a position.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.14
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let lPos = VMEPosition(latitude: 45.74271, longitude: 4.88076, altitude: 0, scene: VMESceneContext(buildingID: "B4", floorID: "B4-UL01"))
///    let _ = mMapController.addOverlayViewID("Overlay4", view: lView, position: lPos, anchorMode:.centerLeft)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param position position The position to which the overlay view will be anchored.  The bottom center of the view will be tied to the position.
///
/// \param anchorMode The part of the view to be anchored to the map.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view position:(VMEPosition * _Nonnull)position anchorMode:(enum VMEAnchorMode)anchorMode SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a poi.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let _ = mMapController.addOverlayViewID("Overlay2", view: lView, poiID: "B4-UL00-ID0015")
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param poiID The view will be anchored to the center point of the poi
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view poiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a poi.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let _ = mMapController.addOverlayViewID("Overlay2", view: lView, poiID: "B4-UL00-ID0015", anchorMode:.center)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param poiID The view will be anchored to the center point of the poi
///
/// \param anchorMode The part of the view to be anchored to the map.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewWithOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view poiID:(NSString * _Nonnull)poiID anchorMode:(enum VMEAnchorMode)anchorMode SWIFT_WARN_UNUSED_RESULT;
/// Sets the position of the overlay view
/// version:
/// 1.1
/// \param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param position position The position to update
///
///
/// returns:
/// true if the overlay has been updated, otherwise no.
- (BOOL)setOverlayAnchorWithOverlayViewID:(NSString * _Nonnull)overlayViewID position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
/// Sets the poi of the overlay view
/// version:
/// 1.1
/// \param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param poiID The poi id to update
///
///
/// returns:
/// true if the overlay has been updated, otherwise no.
- (BOOL)setOverlayAnchorWithOverlayViewID:(NSString * _Nonnull)overlayViewID poiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Removes the overlay view from the map.
/// version:
/// 1.1
/// \param overlayViewID The id of the overlay view to remove.
///
///
/// returns:
/// true if the overlay has been removed, otherwise no.
- (BOOL)removeOverlayViewWithOverlayViewID:(NSString * _Nonnull)overlayViewID SWIFT_WARN_UNUSED_RESULT;
/// Control the visibility of the compass heading marker.
/// The compass heading marker is associated with the location overlay and indicates the orientation of the device.
/// version:
/// 1.23
/// \param visible If true, , then the compass heading marker is visible.  Otherwise, it will be hidden.
///
- (void)setCompassHeadingMarkerVisible:(BOOL)visible;
/// Retrieve the visibility of the compass heading marker.
/// note:
/// see For more info VMEMapView::setCompassHeadingMarkerVisible:
/// version:
/// 1.23
///
/// returns:
/// A boolean indicating whether whether the compass heading is visible or not.
- (BOOL)getCompassHeadingMarkerVisible SWIFT_WARN_UNUSED_RESULT;
/// Fetch the custom data from server
/// version:
/// 1.1
/// \code
/// mMapView.refreshCustomData(withSuccessBlock: { [self] in
///     // success - do something with data
///     NSMutableDictionary * lDict = mMapView.getCustomDatafromCache()
/// }) { lError in
///     // error
/// }
///
/// \endcode\param successBlock custom data has been fetched.
///
/// \param errorBlock if there was an error fetching custom data.
///
- (void)fetchCustomDataWithSuccessBlock:(void (^ _Nonnull)(void))successBlock andErrorBlock:(void (^ _Nonnull)(NSError * _Nullable))errorBlock;
/// Returns all pois custom data.
/// version:
/// 1.27
///
/// returns:
/// Dictionary containing all custom data values
- (NSDictionary * _Nullable)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// get the statistics logging state.
/// note:
/// This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLog()
///
/// \endcode
- (BOOL)isStatisticsLog SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogCamera: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogCamera()
///
/// \endcode
- (BOOL)isStatisticsLogCamera SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogInterest: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogInterest()
///
/// \endcode
- (BOOL)isStatisticsLogInterest SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogLocation: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogLocation()
///
/// \endcode
- (BOOL)isStatisticsLogLocation SWIFT_WARN_UNUSED_RESULT;
/// Set the statistics logging.  This attribute is the main switch for logging statistics.
/// note:
/// If enabled, then the requested statistics will be logged. If disabled, none of the requested statistics will be logged.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLog(true)
///
/// \endcode\param pEnabled enabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLog:(BOOL)pEnabled;
/// Set the statistics camera logging.  If enabled, the camera’s ground focus position will be logged at regular intervals during the end users interactions with the map.
/// note:
/// mapController.setStatisticsLog(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLogCamera(true)
///
/// \endcode\param enabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogCamera:(BOOL)pEnabled;
/// Set the statistics location logging.  If enabled, the location received from VMELocationInterface::updateLocation: will be logged at regular intervals while location updates are received.
/// note:
/// mapController.setStatisticsLogLocation(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLogLocation(true)
///
/// \endcode\param enabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogLocation:(BOOL)pEnabled;
/// Set the statistics interest logging.  If enabled, the user’s map interests will be logged.
/// note:
/// mapController.setStatisticsLogInterest(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// <ul>
///   <li>
///     Interests include
///     <ul>
///       <li>
///         selected pois
///       </li>
///       <li>
///         route information (origin and destinations)
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mapController.setStatisticsLogInterest(true)
///
/// \endcode\param pEnabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogInterest:(BOOL)pEnabled;
/// Set the statistics poi tracked position logging for a list of poi IDs.
/// Calling this will override any previous poi IDs that where being tracked.
/// note:
/// mapController.setStatisticsLogInterest(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.18
/// \code
/// mapController.setStatisticsTrackedPoiIDs(["poiID1","poiID2"])
///
/// \endcode\param pTrackedPoiIDs An array of poi IDs to be tracked.  Pass empty array to stop tracking.
///
- (void)setStatisticsTrackedPoiIDs:(NSArray<NSString *> * _Nonnull)pTrackedPoiIDs;
/// See VMEMapView::setStatisticsTrackedPoiIDs: for more info on what this returns.
/// note:
/// This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.18
/// \code
/// var trackedPoiList = mapController.getStatisticsTrackedPoiIDs()
///
/// \endcode
/// returns:
/// The poi ids who are currently being tracked.
- (NSArray<NSString *> * _Nullable)getStatisticsTrackedPoiIDs SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Map Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in Map Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromMapBundle("media/map/visio_island_essentials/category_restaurant.png")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromMapBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from VisioMoveEssential Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in VisioMoveEssential Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromVisioMoveEssentialBundle("icon_search")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromVisioMoveEssentialBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Main App Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in Main App Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromMainBundle("my_app_image.png")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromMainBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Main App Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in VisioMoveEssential Bundle using path and replace image’s RGB color by given colors
///       </li>
///       <li>
///         Call callback method using returned UIImage
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mResourceManager.getImage(path: "close", foregroundColor: UIImage(color: .brown), backgroundColor: UIImage(color: .cyan), strokeColor: UIImage(color: .lightGray), callback: { [self] result in
///     DispatchQueue.main.async(execute: { [self] in
///         if result != nil {
///             self.myView.image = result
///         }
///     })
/// })
///
/// \endcode\param path The relative path.
///
/// \param foregroundColor green color on original image will be replaced by this color
///
/// \param backgroundColor blue color on original image will be replaced by this color
///
/// \param strokeColor red color on original image will be replaced by this color
///
/// \param callback method called with returned UIImage
///
- (void)getImageWithPath:(NSString * _Nonnull)pPath foregroundColor:(UIColor * _Nonnull)pForegroundColor backgroundColor:(UIColor * _Nonnull)pBackgroundColor strokeColor:(UIColor * _Nonnull)pStrokeColor callback:(void (^ _Nonnull)(UIImage * _Nullable))pCallback;
/// Enable / Disable compass.
/// version:
/// 2.0
/// \param enabled true if we want to enable compass
///
- (void)setCompassWithEnabled:(BOOL)enabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential23VMEMapControllerBuilder")
@interface VMEMapControllerBuilder : NSObject
@property (nonatomic, copy) NSString * _Nonnull mapPath;
@property (nonatomic) NSInteger mapSecretCode;
@property (nonatomic, copy) NSString * _Nonnull mapHash;
@property (nonatomic, copy) NSString * _Nonnull mapServerURL;
@property (nonatomic) BOOL promptUserToDownloadMap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Interface definition of methods that are invoked when map data are loaded without display
/// version:
/// 2.0
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     
///     mMapController.loadMapData()
///     mMapController.setLifeCycleListener(self)
/// }
/// func mapDataDidLoad(mapController: VMEMapController, venueData: [String:Any]) {
///     mMapController.loadMapView(mapView: mapView)
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential18VMEMapDataListener_")
@protocol VMEMapDataListener <NSObject>
@optional
/// Invoked when the map bundle data has been loaded and is ready
/// version:
/// 2.0
- (void)mapDataDidLoadWithVenueData:(NSDictionary<NSString *, id> * _Nonnull)venueData;
@end


/// The map descriptor object contains information related to it’s associated map bundle.
/// version:
/// v1.21
SWIFT_CLASS("_TtC18VisioMoveEssential16VMEMapDescriptor")
@interface VMEMapDescriptor : NSObject
/// Identifier of map (can be used within a filename).
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
/// The name of the map bundle, including it’s domain.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified name;
/// A timestamp indicating when the map was built (UTC + 0).
/// note:
/// The format of the timestamp is: YYYYMMDDHHMMSS
/// version:
/// v1.21
@property (nonatomic, readonly) int64_t timestamp;
/// A secret code that is required in order to load the map.
/// version:
/// v1.21
@property (nonatomic, readonly) NSInteger secretCode;
/// The expiry date of the map bundle. The format of the date is [string YYYY/MM/DD, ISO short format, UTC].
/// If the string is empty, then it indicates the map doesn’t have an expiry date.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified expiryDate;
/// The SDK type that this map descriptor represents.
/// note:
/// VisioMoveEssential expects the type to be “move”
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkType;
/// The SDK version that the map bundle was built for.
/// note:
/// For the map to be valid, this must be less than or equal to VMEMapController.minDataSDKVersion.
/// Otherwise the SDK has dropped support for this version of map bundle.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkVersion;
/// The minimum version of SDK that can load the map which this map descriptor represents.
/// note:
/// For the map to be valid, this must be greater than or equal to VMEMapController.dataSDKVersion.  Otherwise the map bundle is too recent for the SDK.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkMinVersion;
/// The filename of the map bundle as stored on the map server.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified zipFile;
/// The target of the map bundle.
/// version:
/// v1.27
@property (nonatomic, readonly, copy) NSString * _Null_unspecified path;
/// The target of the map bundle.
/// version:
/// v1.24
@property (nonatomic, readonly, copy) NSString * _Null_unspecified target;
/// The custom data hash.
/// version:
/// v1.27
@property (nonatomic, readonly, copy) NSString * _Null_unspecified customDataHash;
/// The layout data format
/// note:
/// Can be unified or move (undefined)
/// version:
/// v2.0
@property (nonatomic, readonly, copy) NSString * _Null_unspecified layout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// version:
/// v1.21
///
/// returns:
/// true if this map descriptor represents a map bundle that can loaded by this SDK, otherwise false.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

@class VMESceneContext;

/// Map listener to be notified of map related events occuring
/// on the VMEMapController object.
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapHash = "mc8f3fec89d2b7283d15cfcf4eb28a0517428f054"
///     })
///     mMapController.loadMapData()
///     mMapController.setMapListener(self)
///     
/// }
///
/// func mapSceneDidUpdate(mapController: VMEMapController, scene: VMESceneContext, viewMode: VMEViewMode)  {
///     // ...
/// }
///
/// func mapDidReceiveTapGesture(mapController: VMEMapController, position: VMEPosition?) {
///     // ...
/// }
///
/// \endcodeversion:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential14VMEMapListener_")
@protocol VMEMapListener <NSObject>
@optional
/// Notifies the listener that the map’s scene or view mode has changed.
/// version:
/// 1.9
/// \param mapController The originator of the notification
///
/// \param scene The maps’s scene
///
/// \param viewMode The map’s view mode
///
- (void)mapSceneDidUpdateWithMapController:(VMEMapController * _Nonnull)mapController scene:(VMESceneContext * _Nonnull)scene viewMode:(enum VMEViewMode)viewMode;
/// Notifies the listener that a tap gesture has occurred on map view.
/// version:
/// 1.18
/// \param mapController The originator of the notification
///
/// \param position The position returned by the click in lat/lon coordinate - will be nil if you click outside of map
///
- (void)mapDidReceiveTapGestureWithMapController:(VMEMapController * _Nonnull)mapController position:(VMEPosition * _Nullable)position;
@end

@class NSCoder;
@class UITraitCollection;

/// This is the main UI View.
/// Used to display map inside.
/// The map view can be created either with the initWithFrame: method or within a nib.
/// VMEMapView can only be read and modified from the main thread, similar to all UIKit objects. Calling these methods from another thread will result in an exception or undefined behavior.
SWIFT_CLASS("_TtC18VisioMoveEssential10VMEMapView")
@interface VMEMapView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// This method will be automatically called by the system when the
/// VMEMapController has been added to a xib.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Callback protocol for receiving navigation results.  For computing a route and navigation see VMEMapController::computeRoute:callback:.
/// version:
/// 2.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential21VMENavigationListener_")
@protocol VMENavigationListener <NSObject>
/// Notified when instructions have been generated.
/// version:
/// 2.0
/// \param instructions An array of instructions
///
- (void)instructionsGeneratedWithInstructions:(NSArray<VMEInstruction *> * _Nonnull)instructions;
/// Notified when instructions has changed.
/// version:
/// 2.0
/// \param instructionIndex An index refering to current instruction
///
- (void)instructionIndexUpdatedWithInstructionIndex:(NSInteger)instructionIndex;
@end

@class NSURL;
enum VMEPoiAnchorMode : NSInteger;
enum VMEPoiAltitudeMode : NSInteger;
enum VMEPoiDisplayMode : NSInteger;
@class VMEPoiOrientation;
@class VMEPoiVisibilityRamp;

/// Represents a physical poi within the map
/// A Poi encapsulates information about a physical poi, including its name, description, categories and any other information we might have about it.
/// version:
/// 1.10
SWIFT_CLASS("_TtC18VisioMoveEssential6VMEPoi")
@interface VMEPoi : NSObject
/// The unique identifier of the poi
@property (nonatomic, copy) NSString * _Nonnull id;
/// The name associated with the poi.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The icon associated with the poi.  This will appear
@property (nonatomic, copy) NSString * _Nonnull icon;
/// The category id’s associated with the poi
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull categories;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
@property (nonatomic, strong) VMEPosition * _Nullable position;
@property (nonatomic, strong) VMEPoiSize * _Nonnull size;
@property (nonatomic) enum VMEPoiAnchorMode anchorMode;
@property (nonatomic) enum VMEPoiAltitudeMode altitudeMode;
@property (nonatomic) enum VMEPoiDisplayMode displayMode;
@property (nonatomic, strong) VMEPoiOrientation * _Nonnull orientation;
@property (nonatomic, strong) VMEPoiVisibilityRamp * _Nonnull visibilityRamp;
/// A description in HTML for the poi.  The HTML may contain references to other media types, such as images and video.
/// These media types may be stored locally within the application or linked to a remote server.
@property (nonatomic, copy) NSString * _Null_unspecified htmlDescription;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum defines the possible altitude modes. An altitude mode determines how the altitude is interpreted.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiAltitudeMode, open) {
/// The altitude is interpreted relative to the terrain.
/// version:
/// 1.1
  VMEPoiAltitudeModeRelative = 0,
/// The altitude is interpreted as the height above the WGS84 ellipsoid
/// version:
/// 1.1
  VMEPoiAltitudeModeAbsolute = 1,
};

/// This enum defines the possible anchor modes.
/// An anchor mode determines how an poi object is anchored to a given position.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiAnchorMode, open) {
/// Anchor to the top left.
/// version:
/// 1.1
  VMEPoiAnchorModeTopLeft = 0,
/// Anchor to the top center
/// version:
/// 1.1
  VMEPoiAnchorModeTopCenter = 1,
/// Anchor to the top right
/// version:
/// 1.1
  VMEPoiAnchorModeTopRight = 2,
/// Anchor to the center left
/// version:
/// 1.1
  VMEPoiAnchorModeCenterLeft = 3,
/// Anchor to the center
/// version:
/// 1.1
  VMEPoiAnchorModeCenter = 4,
/// Anchor to the center right
/// version:
/// 1.1
  VMEPoiAnchorModeCenterRight = 5,
/// Anchor to the bottom left
/// version:
/// 1.1
  VMEPoiAnchorModeBottomLeft = 6,
/// Anchor to the bottom center
/// version:
/// 1.1
  VMEPoiAnchorModeBottomCenter = 7,
/// Anchor to the bottom right
/// version:
/// 1.1
  VMEPoiAnchorModeBottomRight = 8,
};

/// This enum defines the possible display modes. A display mode determines how the point is displayed within the map.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiDisplayMode, open) {
/// The poi will obscured when located behind map surfaces.
/// version:
/// 1.1
  VMEPoiDisplayModeInlay = 0,
/// The poi is displayed on top of all map surfaces, regardless of whether they are physical infront of the poi.
/// version:
/// 1.1
  VMEPoiDisplayModeOverlay = 1,
};


/// An object that defines the criteria for performing a poi query.
/// version:
/// 1.8
SWIFT_CLASS("_TtC18VisioMoveEssential12VMEPoiFilter")
@interface VMEPoiFilter : NSObject
/// The target is the center point around which the filter parameters will be applied.
/// version:
/// 1.8
@property (nonatomic, readonly) id _Nullable target;
/// Restricts the poi results to this array of poi ids.
/// Useful when only interested in a certain group of pois (e.g. near by restaurants)
/// version:
/// 1.8
@property (nonatomic, copy) NSArray<NSString *> * _Nullable restrictToPoiIDs;
/// Restricts the poi results to the target’s layer.
/// By default, this is true.
/// version:
/// 1.8
@property (nonatomic) BOOL restrictToTargetLayer;
/// Defines the distance (in meters) within which to return poi results.
/// The distance between the target and poi is computed using the routing network.
/// By default, there is no restricted radius.
/// version:
/// 1.8
@property (nonatomic) double radius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Instantiates a route request
/// version:
/// 1.8
/// \param poiID The poi id to use as the target
///
- (nonnull instancetype)initWithPoiID:(NSString * _Nullable)poiID;
/// Instantiates a route request
/// version:
/// 1.8
/// \param position The position to use as the target
///
- (nonnull instancetype)initWithPosition:(VMEPosition * _Nullable)position;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end


/// A callback  protocol to receive poi filter query notifications.
/// version:
/// 1.8
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMEPoiFilterCallback_")
@protocol VMEPoiFilterCallback <NSObject>
@optional
/// This method be will called by the SDK once the poi filter query has completed.
/// version:
/// 1.8
/// \param mapController The map view who received the compute route request
///
/// \param filter The original poi filter used for the query.
///
/// \param results An array of VMERouteResult objects sorted by distance in ascending order.  The list may be empty if the filter matched with no results.
///
- (void)poiFilterDidFinishWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMEPoiFilter * _Nonnull)filter results:(NSArray<VMERouteResult *> * _Nonnull)results;
@end


/// Interface definition of methods that are invoked when poi related events occur.
/// version:
/// 1.12
/// \code
/// class myClass: UIViewController, VMEPoiListener
///     override func viewDidLoad() {
///         super.viewDidLoad();
///         
///         mMapController = VMEMapController.initController(builderBlock: { builder in
///             builder.mapPath = "MapBundleTheme"
///             builder.mapSecretCode = 0
///         })
///         mMapController.setPoiListener(self)
///         mMapController.loadMapData()
///     }
///     func mapDidSelectPoi(mapController: VMEMapController, poiID: String,position: VMEPosition) -> Bool {
///        // ...
///        return true
///     }
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential14VMEPoiListener_")
@protocol VMEPoiListener <NSObject>
@optional
/// Notifies the listener that a poi has been selected.
/// note:
///
/// Applies to:
/// <ul>
///   <li>
///     static pois
///   </li>
///   <li>
///     dynamic pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param mapController The originator of the notification
///
/// \param poiID The ID of the poi selected
///
/// \param position The physical position where the select event took poi within the map.
///
///
/// returns:
/// true if the listener consumes the event, false otherwise.
- (BOOL)mapDidSelectPoiWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
@end


/// VMEPoiOrientation represents an orientation element that may be associated with a poi object.
/// It encapsulates some logic for controlling the camera’s heading. It should only be constructed using the factory helper methods below.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential17VMEPoiOrientation")
@interface VMEPoiOrientation : NSObject
+ (nonnull instancetype)initFacing SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initFlat SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initFixedWithHeading:(double)pHeading SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that determines the size of the poi within the map
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential10VMEPoiSize")
@interface VMEPoiSize : NSObject
/// Controls the distance at which the poi does not become bigger as you approach it.
/// When the camera is within this distance of the poi, the visible size of the poi on the screen will be the same as what it looked like when it was constantSizeDistance meters away. If set to 0.0, the size of the poi will be determined by scale, regardless of it’s distance from the camera.
/// Default value is set to 0.
/// version:
/// 1.1
@property (nonatomic, readonly) double constantSizeDistance;
/// The scale in meters to apply to the poi.
/// version:
/// 1.1
@property (nonatomic, readonly) double scale;
/// Create an poi size object with a scale
/// version:
/// 1.1
/// \param scale The scale in meters to apply to the poi.
///
- (nonnull instancetype)initWithScale:(double)pScale OBJC_DESIGNATED_INITIALIZER;
/// Create an poi size object with a scale and a constant size distance.
/// version:
/// 1.1
/// \param scale The scale in meters to apply to the poi.
///
/// \param constantSizeDistance Controls the distance at which the poi does not become bigger as you approach it
///
- (nonnull instancetype)initWithScale:(double)pScale constantSizeDistance:(double)pConstantSizeDistance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that controls the poi’s visibility as a function of the camera’s altitude.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential20VMEPoiVisibilityRamp")
@interface VMEPoiVisibilityRamp : NSObject
/// Creates a visibility ramp object with some default values.
/// note:
/// When using this method, the other properties of the object are initialized to appropriate values. See the property default values for more info.
/// version:
/// 1.1
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A VMEPosition object represents a position incorporating the geographical coordinates, altitude and associated building and floor.
/// Typically, you can use a VMEPosition object when moving the camera, anchoring overlays to the map, creating a route from a position, etc.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential11VMEPosition")
@interface VMEPosition : NSObject <NSCopying>
/// The latitude of the position.
/// version:
/// 1.1
@property (nonatomic) double latitude;
/// The longitude of the position.
/// version:
/// 1.1
@property (nonatomic) double longitude;
/// The altitude of the position.
/// version:
/// 1.1
@property (nonatomic) double altitude;
/// The position’s scene context.
/// version:
/// 1.9
@property (nonatomic, strong) VMESceneContext * _Null_unspecified scene;
/// Constructor for creating a position object inside
/// version:
/// 1.9
/// \param latitude The position’s latitude
///
/// \param longitude The position’s longitude
///
/// \param altitude The position’s altitude, relative to the floor.  For example if the altitude is 10m, then the position will be 10m above the floor.
///
/// \param scene The scene context to associated with the position.
///
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude scene:(VMESceneContext * _Nonnull)scene OBJC_DESIGNATED_INITIALIZER;
/// Constructor for creating a position object inside
/// version:
/// 1.1
/// \param latitude The position’s latitude
///
/// \param longitude The position’s longitude
///
/// \param altitude The position’s altitude, relative to the floor.  For example if the altitude is 10m, then the position will be 10m above the floor.
///
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another VMEPosition object.
/// version:
/// 1.2
/// \param position The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The different ways to interpret multiple destinations, these options do not change the behavior if there is only one destination.
/// For optimal routes there is a practical limit on 5-6 destinations.
/// version:
/// 1.2
typedef SWIFT_ENUM(NSInteger, VMERouteDestinationsOrder, open) {
/// Indicates that the destinations should be traversed in order
/// version:
/// 1.2
  VMERouteDestinationsOrderInOrder = 0,
/// Indicates that the destinations should be traversed in the order that minimizes the overall distance or time: e.g. travelling salesman order
/// version:
/// 1.2
  VMERouteDestinationsOrderOptimal = 1,
/// Indicates that the destinations should be traversed in the order that minimizes the overall distance or time: e.g. travelling salesman order, but always finish on the last routing node of mDestinations.
/// For example, you enter a shop, you visit the different stands and you finish at the exit.
/// version:
/// 1.2
  VMERouteDestinationsOrderOptimalFinishOnLast = 2,
/// Indicates that one destination should be returned, the one that is closest (be fastest or shortest).
/// version:
/// 1.2
  VMERouteDestinationsOrderClosest = 3,
};

enum VMERouteRequestType : NSInteger;

/// Represents a route request to VMEMapView::computeRoute:callback:
/// version:
/// 1.0
SWIFT_CLASS("_TtC18VisioMoveEssential15VMERouteRequest")
@interface VMERouteRequest : NSObject <NSCopying>
/// Requests that the computed route is accessible.
/// note:
/// Refer the map’s “App Configuration” within VisioMapEditor to determine what routing attributes/modalities are filtered when enabled.
/// version:
/// 1.0
@property (nonatomic) BOOL isAccessible;
/// The poi id representing the origin of the route.
/// version:
/// 1.2
@property (nonatomic) id _Nullable origin;
/// Instantiates a route request.
/// note:
/// By default
/// <ul>
///   <li>
///     VMERouteRequest::requestType is set to VMERouteRequestType.fastest
///   </li>
///   <li>
///     VMERouteRequest::destinationsOrder is set to VMERouteDestinationsOrder.InOrder
///   </li>
///   <li>
///     VMERouteRequest::isAccessible is set to false.
///   </li>
/// </ul>
/// version:
/// 1.7
- (nonnull instancetype)init;
/// Instantiates a route request.
/// note:
/// By default:
/// <ul>
///   <li>
///     VMERouteRequest::isAccessible is set to NO.
///   </li>
/// </ul>
/// version:
/// 1.2
/// \param requestType Determines the type of request
///
/// \param destinationsOrder Determines the visiting order of the destination objects
///
- (nonnull instancetype)initWithRequestType:(enum VMERouteRequestType)requestType destinationsOrder:(enum VMERouteDestinationsOrder)destinationsOrder;
/// Instantiates a route request.
/// version:
/// 1.2
/// \param requestType Determines the type of request
///
/// \param destinationsOrder Determines the visiting order of the destination objects
///
/// \param isAccessible Determines if route will be accessible.
///
- (nonnull instancetype)initWithRequestType:(enum VMERouteRequestType)requestType destinationsOrder:(enum VMERouteDestinationsOrder)destinationsOrder accessible:(BOOL)isAccessible OBJC_DESIGNATED_INITIALIZER;
/// version:
/// 1.0
///
/// returns:
/// The origin of the route.
/// The origin may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
- (id _Nullable)getOrigin SWIFT_WARN_UNUSED_RESULT;
/// version:
/// 1.0
///
/// returns:
/// An ordered array containing the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
- (NSArray * _Nonnull)getDestinations SWIFT_WARN_UNUSED_RESULT;
/// Adds a destination to the end of the destinations array’s content.
/// version:
/// 1.0
/// version:
/// 1.2 Now returns a boolean and the destination parameter was made generic.
/// \param destination The destination may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map
///   </li>
/// </ul>
///
///
/// returns:
/// true if the destination was added successfully, otherwise false.
- (BOOL)addDestination:(id _Nonnull)pDestination SWIFT_WARN_UNUSED_RESULT;
/// Adds the objects contained in the given array to the end of the destinations array’s content.
/// version:
/// 1.0
/// version:
/// 1.2 Change return type to bolean
/// \param destinations The destinations array may contain the following object types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
///
///
/// returns:
/// true if one or more of the destination entries where valid, otherwise false.
- (BOOL)addDestinations:(NSArray * _Nonnull)pDestinations SWIFT_WARN_UNUSED_RESULT;
/// Remove destination object at the given index
/// version:
/// 1.2
/// \param index Index of destination to remove.
///
- (void)removeDestinationAt:(NSInteger)index;
/// Remove all destinations objects from the destination array.
/// version:
/// 1.2
- (void)removeAllDestinations;
/// Replace destination object at the given index with the given position
/// version:
/// 1.2
/// \param index Index of destination to replace.
///
/// \param destination The object to add to the destination.  The destination may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
///
///
/// returns:
/// true if the replace occurred successfully, otherwise false.
- (BOOL)replaceDestinationAt:(NSInteger)index withDestination:(id _Nonnull)destination SWIFT_WARN_UNUSED_RESULT;
/// Required for perforing copy operations
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another  object.
/// version:
/// 2.0
/// \param other The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

/// The route request type determines the parameter to use when calculating the route
/// version:
/// 1.2
typedef SWIFT_ENUM(NSInteger, VMERouteRequestType, open) {
/// Indicates a request for a route that optimizes distance.
/// version:
/// 1.2
  VMERouteRequestTypeShortest = 0,
/// Indicates a request for a route that optimizes time.
/// version:
/// 1.2
  VMERouteRequestTypeFastest = 1,
};

@class VMESegment;

/// Contains information related to a computed route.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential14VMERouteResult")
@interface VMERouteResult : NSObject <NSCopying>
/// The duration (seconds) of the route
/// version:
/// 1.2
@property (nonatomic, readonly) double duration;
/// The length (metres) of the route
/// version:
/// 1.2
@property (nonatomic) double length;
/// An array of destinations in the order that they will be visited.
/// If there was an invalid origin or destination in the request, it will be removed from this array.
/// version:
/// 1.2
@property (nonatomic, readonly, copy) NSArray * _Null_unspecified destinations;
/// An array of segments that make up the route.
/// version:
/// 1.17
@property (nonatomic, readonly, copy) NSArray<VMESegment *> * _Null_unspecified segments;
/// Instantiates a route result object.
/// version:
/// 1.2
/// \param destinations An array of destinations in the order that they will be visited.
///
/// \param duration The duration (seconds) of the route.
///
/// \param length The length (metres) of the route.
///
- (nonnull instancetype)initWithDestinations:(NSArray * _Nonnull)destinations duration:(double)duration length:(double)length;
/// Instantiates a route result object.
/// version:
/// 1.17
/// \param destinations An array of destinations in the order that they will be visited.
///
/// \param duration The duration (seconds) of the route.
///
/// \param length The length (metres) of the route.
///
/// \param segments The array of segment objects that make up the route.
///
- (nonnull instancetype)initWithDestinations:(NSArray * _Nonnull)destinations duration:(double)duration length:(double)length segments:(NSArray<VMESegment *> * _Nonnull)segments OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another VMERouteResult object.
/// version:
/// 1.2
/// \param routeResult The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqualTo:(VMERouteResult * _Nonnull)routeResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A VMESceneContext object represents a physical location within the map.
/// The scene context may be either outside or within a building.
/// version:
/// 1.9
SWIFT_CLASS("_TtC18VisioMoveEssential15VMESceneContext")
@interface VMESceneContext : NSObject <NSCopying>
/// The id of the building.
/// note:
/// If isOutside returns YES, then this value is undefined.
/// version:
/// 1.9
@property (nonatomic, readonly, copy) NSString * _Nullable buildingID;
/// The id of the floor.
/// note:
/// If isOutside returns true, then this value is undefined
/// version:
/// 1.9
@property (nonatomic, readonly, copy) NSString * _Nullable floorID;
/// Create a scene context for a given building and floor
/// version:
/// 1.9
/// \param buildingID The id of the building
///
/// \param floorID The id of the floor
///
- (nonnull instancetype)initWithBuildingID:(NSString * _Nullable)buildingID floorID:(NSString * _Nullable)floorID;
/// Create a scene context for the outside.
/// version:
/// 1.9
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// version:
/// 1.9
///
/// returns:
/// true if the scene context is located outside, otherwise false.
- (BOOL)isOutside SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Compares two scene context objects to determine whether they are equal.
/// version:
/// 2.0
/// \param other The object to compare against.
///
///
/// returns:
/// true if this scene context object is equal.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a scene update that can be applied to the VMEMapController.
/// Use the provided constructors to instantiate different types of scene updates.
/// A scene update can be used to change the following:
/// <ul>
///   <li>
///     view mode
///   </li>
///   <li>
///     focused building
///   </li>
///   <li>
///     focused floor
///   </li>
/// </ul>
/// Updating the scene will not update the camera.
/// note:
/// Due to the “zoom storyboard”, if the camera is focused on a different building to that in the requested scene update, then the next time the user interacts with the map, the focused building will change automatically.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential14VMESceneUpdate")
@interface VMESceneUpdate : NSObject
/// Update the scene’s view mode.  The current focused building and floor will remain unchanged.
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode SWIFT_WARN_UNUSED_RESULT;
/// Update the scene.
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
/// \param buildingID The building id to apply focus.  The focused floor will be determined by the first of the following:
/// <ul>
///   <li>
///     the current floor if it is associated with the building
///   </li>
///   <li>
///     the building’s default floor, if it has one.
///   </li>
///   <li>
///     otherwise the ground floor will be given focus.
///   </li>
/// </ul>
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode buildingID:(NSString * _Nullable)buildingID SWIFT_WARN_UNUSED_RESULT;
/// Update the scene
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
/// \param floorID The floor id to apply focus.  The building id associated with the floorID will be deduced.
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode floorID:(NSString * _Nullable)floorID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Callback protocol for receiving search view results.
/// note:
/// VMEMapController::showSearchViewWithTitle: for displaying the search view.
/// version:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential21VMESearchViewCallback_")
@protocol VMESearchViewCallback <NSObject>
/// Notified when a poi was selected from the search view
/// version:
/// 1.0
/// \param mapController The map view who received the original request
///
/// \param poiID The id of the poi selected.
///
- (void)searchViewDidSelectPoiIDWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID;
/// Notified when the search view was cancelled
/// version:
/// 1.0
/// \param mapController The map view who received the original request.
///
- (void)searchViewDidCancelWithMapController:(VMEMapController * _Nonnull)mapController;
@end


/// A segment describes a part of a computed route.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18VisioMoveEssential10VMESegment")
@interface VMESegment : NSObject <NSCopying>
/// The path of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSArray<VMEPosition *> * _Null_unspecified path;
/// The duration (seconds) of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) double duration;
/// The length (metres) of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) double length;
/// The maneuver type of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) enum VMEManeuverType maneuverType;
/// The floor transition type of the segment.
/// If the segment doesn’t change floors, then will be set to ::VMEFloorTransitionTypeNone.
/// <ul>
///   <li>
///     Version 1.22
///   </li>
/// </ul>
@property (nonatomic, readonly) enum VMEFloorTransitionType floorTransitionType;
/// The floor transition id of the segment.
/// If there is no floor transition then value is “”.
/// <ul>
///   <li>
///     Version 1.22
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull floorTransitionId;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The view mode controls certain elements of the scene and possibly the camera’s viewpoint.
/// version:
/// 1.0
typedef SWIFT_ENUM(NSInteger, VMEViewMode, open) {
/// note:
///
/// In global mode, the following occurs:
/// <ul>
///   <li>
///     The camera focuses on the footprint “outside”.
///   </li>
///   <li>
///     If present, all building models are made visible and building icons will appear.
///   </li>
///   <li>
///     All floors from all buildings will be hidden.
///   </li>
/// </ul>
/// version:
/// 1.0
  VMEViewModeGlobal = 0,
/// note:
///
/// In floor mode, the following occurs:
/// <ul>
///   <li>
///     If present, the focused building’s model will animate and disappear.
///   </li>
///   <li>
///     The focused building’s floors will appear in lego mode.
///   </li>
///   <li>
///     The camera will focus on the focused floor’s footprint.
///   </li>
/// </ul>
/// version:
/// 1.0
  VMEViewModeFloor = 1,
/// The view mode is undefined.  If this value is passed in an camera update, then the most appropriate view mode will be chosen.
/// version:
/// 1.0
  VMEViewModeUnknown = 2,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef VISIOMOVEESSENTIAL_SWIFT_H
#define VISIOMOVEESSENTIAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VisioMoveEssential",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)








typedef SWIFT_ENUM(NSInteger, VMEAnchorMode, open) {
/// Anchor to the top left.
/// version:
/// 1.14
  VMEAnchorModeTopLeft = 0,
/// Anchor to the top center
/// version:
/// 1.14
  VMEAnchorModeTopCenter = 1,
/// Anchor to the top right
/// version:
/// 1.14
  VMEAnchorModeTopRight = 2,
/// Anchor to the center left
/// version:
/// 1.14
  VMEAnchorModeCenterLeft = 3,
/// Anchor to the center
/// version:
/// 1.14
  VMEAnchorModeCenter = 4,
/// Anchor to the center right
/// version:
/// 1.14
  VMEAnchorModeCenterRight = 5,
/// Anchor to the bottom left
/// version:
/// 1.14
  VMEAnchorModeBottomLeft = 6,
/// Anchor to the bottom center
/// version:
/// 1.14
  VMEAnchorModeBottomCenter = 7,
/// Anchor to the bottom right
/// version:
/// 1.14
  VMEAnchorModeBottomRight = 8,
};


/// Callback protocol to be notified of animation events
/// version:
/// 1.7
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMEAnimationCallback_")
@protocol VMEAnimationCallback <NSObject>
@optional
/// Notify the callback that the animation did finish.
/// version:
/// 1.7
- (void)didFinish;
@end

@class VMEMapController;
@class NSString;
@class VMEPosition;

/// Interface definition of methods that are invoked when building related event occurs within the map.
/// version:
/// 1.17
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     mMapController.setBuildingListener(self)
///     mMapController.loadMapData()
/// }
/// func mapDidSelectBuilding(mapController: VMEMapController, buildingID: String, position: VMEPosition?) -> Bool {
///    // ...
///     return true
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential19VMEBuildingListener_")
@protocol VMEBuildingListener <NSObject>
@optional
/// Notifies the listener that a poi has been selected.
/// version:
/// 1.17
/// \param mapController The originator of the notification
///
/// \param buildingID The ID of the building selected
///
/// \param position The physical position where the select event took poi within the map.
///
///
/// returns:
/// true if the listener consumes the event, false otherwise.
- (BOOL)mapDidSelectBuildingWithMapController:(VMEMapController * _Nonnull)mapController buildingID:(NSString * _Nonnull)buildingID position:(VMEPosition * _Nullable)position SWIFT_WARN_UNUSED_RESULT;
@end

@class VMELatLng;

/// An immutable class that aggregates all camera context such as target, altitude, bearing, pitch, and radius.
/// version:
/// 1.24
SWIFT_CLASS("_TtC18VisioMoveEssential16VMECameraContext")
@interface VMECameraContext : NSObject
- (VMELatLng * _Nonnull)getTarget SWIFT_WARN_UNUSED_RESULT;
- (double)getAltitude SWIFT_WARN_UNUSED_RESULT;
- (double)getBearing SWIFT_WARN_UNUSED_RESULT;
- (double)getPitch SWIFT_WARN_UNUSED_RESULT;
- (double)getRadius SWIFT_WARN_UNUSED_RESULT;
/// Compares this camera context to the specified object.
/// version:
/// 1.24
/// \param object The camera context to compare this camera context against.
///
///
/// returns:
/// true if this VMECameraContext represents the same camera context as the specified, false otherwise.
- (BOOL)isEqual:(id _Nullable)pCameraContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// VMECameraDistanceRange represents a distance element that may be associated with a VMECameraUpdate object.
/// It encapsulates some logic for controlling the distance of the camera. It should only be constructed using the factory helper methods below.
/// The camera will use the previously specified camera distance range when it’s not specified in the camera update.
/// note:
/// The VMECameraDistanceRange object is immutable.
/// note:
/// In the above example, the camera will keep its altitude = 100 until another VMECameraUpdate is set with a new VMECameraDistanceRange.
/// version:
/// 1.18
/// \code
/// let lCameraUpdate = VMECameraUpdate.initCameraUpdate(builderBlock:{ builder in
///     builder.targets = [lLocation.position]
///     builder.heading = lCameraHeading
///     builder.pitch = VMECameraPitch.initCameraPitch(value: -30.0)
///     builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 5, maxRadius: 20)
///     })
/// mapController.animateCamera(lCameraUpdate, duration: 0.5, callback: nil)
///
/// \endcode
SWIFT_CLASS("_TtC18VisioMoveEssential22VMECameraDistanceRange")
@interface VMECameraDistanceRange : NSObject <NSCopying>
/// Keep the camera’s current altitude range.
/// version:
/// 1.18
+ (nonnull instancetype)initCurrentAltitudeRange SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the default altitude range.
/// version:
/// 1.18
+ (nonnull instancetype)initDefaultAltitudeRange SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the radius to control the distance of the camera.
/// The radius distance is represented as the distance from the camera to the ground along the camera’s view axis.
/// Internally the radius distance will be converted to a min/max altitude which must respect the min/max altitude limits of the map.
/// version:
/// 1.18
/// \param minRadius the minimum radius of the camera
///
/// \param maxRadius the maximum radius of the camera
///
+ (nonnull instancetype)initRadiusRangeWithMinRadius:(double)pMinRadius maxRadius:(double)pMaxRadius SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Use the altitude  to control the distance of the camera
/// version:
/// 1.18
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     minAltitude: the minimum altitude of the camera, can’t be lower than the minimum altitude set in VisioMapEditor
///   </li>
///   <li>
///     maxAltitude: the maximum altitude of the camera, can’t be higher than the maximum altitude set in VisioMapEditor
///   </li>
/// </ul>
+ (nonnull instancetype)initAltitudeRangeWithMinAltitude:(double)pMinAltitude maxAltitude:(double)pMaxAltitude SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraDistanceRange * _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential30VMECameraDistanceAltitudeRange")
@interface VMECameraDistanceAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential37VMECameraDistanceCurrentAltitudeRange")
@interface VMECameraDistanceCurrentAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential37VMECameraDistanceDefaultAltitudeRange")
@interface VMECameraDistanceDefaultAltitudeRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential28VMECameraDistanceRadiusRange")
@interface VMECameraDistanceRadiusRange : VMECameraDistanceRange
- (BOOL)isEqual:(id _Nullable)pDistanceRange SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// VMECameraHeading represents a heading element that may be associated with a VMECameraUpdate object.
/// It encapsulates some logic for controlling the camera’s heading. It should only be constructed using the factory helper methods below.
/// note:
/// The VMECameraHeading object is immutable.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential16VMECameraHeading")
@interface VMECameraHeading : NSObject <NSCopying>
+ (nonnull instancetype)initCameraHeadingCurrent SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraHeadingWithPoiID:(NSString * _Nonnull)pPoiID SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraHeadingWithValue:(double)pHeading SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraHeading * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential23VMECameraHeadingCurrent")
@interface VMECameraHeadingCurrent : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pCameraHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential19VMECameraHeadingPOI")
@interface VMECameraHeadingPOI : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraHeadingValue")
@interface VMECameraHeadingValue : VMECameraHeading
- (BOOL)isEqual:(id _Nullable)pHeading SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// interface definition of methods that are invoked when camera has moved
/// version:
/// 1.24
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     mMapController.setCameraListener(self)
///     mMapController.loadMapData()
/// }
/// func mapCameraDidMove(mapController: VMEMapController)  {
///    // ...
///
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential17VMECameraListener_")
@protocol VMECameraListener <NSObject>
@optional
/// Notifies the listener that the camera has moved.
/// Called repeatedly as the camera continues to move.
/// This may be called as often as once every frame and should not perform expensive operations.
/// version:
/// 1.24
/// \param mapController The originator of the notification
///
- (void)mapCameraDidMoveWithMapController:(VMEMapController * _Nonnull)mapController;
@end

/// This enum defines the possible reasons that might invoke the camera to move.
/// version:
/// 1.25
typedef SWIFT_ENUM(NSInteger, VMECameraMoveReason, open) {
/// Non-gesture animation initiated in response to user actions. For example: poi selected, location tracker, or next instruction.
/// version:
/// 1.25
  VMECameraMoveReasonAnimation = 0,
/// Developer initiated animation.
/// version:
/// 1.25
  VMECameraMoveReasonDeveloperAnimation = 1,
/// Camera motion initiated in response to user gestures on the map. For example: drag, pinch to zoom, or rotate.
/// version:
/// 1.25
  VMECameraMoveReasonGesture = 2,
};


SWIFT_CLASS("_TtC18VisioMoveEssential14VMECameraPitch")
@interface VMECameraPitch : NSObject <NSCopying>
+ (nonnull instancetype)initCameraPitchCurrent SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraPitchDefault SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initCameraPitchWithValue:(double)pPitch SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(VMECameraPitch * _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraPitchCurrent")
@interface VMECameraPitchCurrent : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential21VMECameraPitchDefault")
@interface VMECameraPitchDefault : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18VisioMoveEssential19VMECameraPitchValue")
@interface VMECameraPitchValue : VMECameraPitch
- (BOOL)isEqual:(id _Nullable)pPitch SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VMECameraUpdateBuilder;

/// Represents a camera update that can be applied to the VMEMapController.
/// An immutable class that aggregates all camera update parameters such as  targets, padding, min/max altitude, and heading.
/// Use the provided constructors to instantiate different types of camera updates.
/// A camera update will update the camera’s viewpoint and if necessary will also update the scene so that the viewpoint is focused on the correct building/floor.
/// version:
/// 1.0
SWIFT_CLASS("_TtC18VisioMoveEssential15VMECameraUpdate")
@interface VMECameraUpdate : NSObject
/// The camera current focal point.
/// This constant should be used when a pitch/heading animation should keep focusing on the current focal point.
/// version:
/// 1.18
/// \code
///    let lCameraUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///         builder.targets = [VMECameraUpdate.CAMERA_FOCAL_POINT]
///         builder.heading = VMECameraHeading.initCameraHeading(value:80)
///     })
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CAMERA_FOCAL_POINT;)
+ (NSString * _Nonnull)CAMERA_FOCAL_POINT SWIFT_WARN_UNUSED_RESULT;
/// Compare current VMECameraUpdate with another.
/// version:
/// 1.18
/// \param cameraUpdate The CameraUpdate to compare with.
///
- (BOOL)isEqual:(id _Nullable)pCameraUpdate SWIFT_WARN_UNUSED_RESULT;
/// Constructs a VMECameraUpdate.
/// version:
/// 1.7
/// <ul>
///   <li>
///     Parameters:
///     builderBlock: The builder block responsible for building the object.
///   </li>
/// </ul>
+ (nonnull instancetype)initCameraUpdateWithBuilderBlock:(void (^ _Nonnull)(VMECameraUpdateBuilder * _Nonnull))builderBlock SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VMEViewMode : NSInteger;

/// Used to build a VMECameraUpdate object.
/// version:
/// 1.7
SWIFT_CLASS("_TtC18VisioMoveEssential22VMECameraUpdateBuilder")
@interface VMECameraUpdateBuilder : NSObject
/// note:
/// For more info, VMECameraUpdate.targets.
/// version:
/// 1.7
@property (nonatomic, copy) NSArray<NSObject *> * _Null_unspecified targets;
/// note:
/// For more info, VMECameraUpdate.viewMode.
/// version:
/// 1.7
@property (nonatomic) enum VMEViewMode viewMode;
/// note:
/// For more info, VMECameraUpdate.heading.
/// version:
/// 1.7
@property (nonatomic, strong) VMECameraHeading * _Null_unspecified heading;
/// note:
/// For more info, VMECameraUpdate.paddingTop.
/// version:
/// 1.7
@property (nonatomic) double paddingTop;
/// note:
/// For more info, VMECameraUpdate.paddingBottom.
/// version:
/// 1.7
@property (nonatomic) double paddingBottom;
/// note:
/// For more info, VMECameraUpdate.paddingLeft.
/// version:
/// 1.7
@property (nonatomic) double paddingLeft;
/// note:
/// For more info, VMECameraUpdate.paddingRight.
/// version:
/// 1.7
@property (nonatomic) double paddingRight;
/// note:
/// For more info, VMECameraUpdate.pitch.
/// version:
/// 1.18
@property (nonatomic, strong) VMECameraPitch * _Null_unspecified pitch;
/// note:
/// For more info, VMECameraUpdate.distanceRange.
/// version:
/// 1.18
@property (nonatomic, strong) VMECameraDistanceRange * _Null_unspecified distanceRange;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential11VMECategory")
@interface VMECategory : NSObject
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Callback protocol for receiving compass state events.
/// version:
/// 2.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential18VMECompassListener_")
@protocol VMECompassListener <NSObject>
/// Notified when compass state changes.
/// version:
/// 2.0
/// \param state Boolean with actual compass state
///
- (void)compassStateChangedWithState:(BOOL)state;
@end

@class VMERouteRequest;
@class VMERouteResult;

/// Callback protocol for receiving compute route results.  For computing a route see VMEMapController::computeRoute:callback:.
/// version:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential23VMEComputeRouteCallback_")
@protocol VMEComputeRouteCallback <NSObject>
/// Notified when compute route was successful
/// version:
/// 1.2
/// \param mapController The map view who received the compute route request
///
/// \param routeRequest The original route request object.
///
/// \param routeResult The results of the route request.
///
///
/// returns:
/// true if the route should be added to the map, otherwise false.
- (BOOL)computeRouteDidFinishWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMERouteRequest * _Nonnull)routeRequest result:(VMERouteResult * _Nonnull)routeResult SWIFT_WARN_UNUSED_RESULT;
/// Notified when compute route failed.
/// version:
/// 1.0
/// \param mapController The map view who received the compute route request
///
/// \param routeRequest The original route request object.
///
/// \param error A localized error string indicating the reason for the failure.
///
- (void)computeRouteDidFailWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMERouteRequest * _Nonnull)routeRequest error:(NSString * _Nonnull)error;
@end

/// This enum defines the possible floor transition type.
/// A transition type determines how the route will change floor
/// version:
/// 1.22
typedef SWIFT_ENUM(NSInteger, VMEFloorTransitionType, open) {
/// Floor transition will occur by stairway
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeStairWay = 0,
/// Floor transition will occur by elevator
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeElevator = 1,
/// Floor transition will occur by escalator
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeEscalator = 2,
/// Floor transition will occur by an unknown mean
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeUnknown = 3,
/// There is no floor transition
/// \code
///  - Version: 1.22
///
/// \endcode
  VMEFloorTransitionTypeNone = 4,
};


SWIFT_CLASS("_TtC18VisioMoveEssential14VMEInstruction")
@interface VMEInstruction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An immutable class representing a pair of latitude and longitude coordinates, stored as degrees.
/// version:
/// 1.24
SWIFT_CLASS("_TtC18VisioMoveEssential9VMELatLng")
@interface VMELatLng : NSObject
/// The objects latitude
/// version:
/// 1.24
@property (nonatomic) double latitude;
/// The objects longitude
/// version:
/// 1.24
@property (nonatomic) double longitude;
/// Compares this VMELatLng to the specified object.
/// version:
/// 1.24
/// \param other The VMELatLng to compare this object against.
///
///
/// returns:
/// true if this VMELatLng represents the same lat lng as the specified object, false otherwise.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Interface definition of methods that are invoked when life cycle events occur
/// version:
/// 1.12
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     
///     mMapController.loadMapData()
///     mMapController.setLifeCycleListener(self)
/// }
/// func mapDidInitializeEngine(mapController: VMEMapController) {
///    // ...
///     return true
/// }
///
/// func mapDataDidLoad(mapController: VMEMapController, venueData: [String:Any]) {
/// }
///
/// func mapViewDidLoad(mapController: VMEMapController) {
/// }
///
/// func mapDidGainFocus(mapController: VMEMapController) {
/// }
///
/// func mapDidDisplayRoute(mapController: VMEMapController,result: VMERouteResult) {
/// }
///
/// func mapDidDisplayPoiInfo(mapController: VMEMapController, poiID: String) {
/// }
///
/// func mapDidDisplaySearch(mapController: VMEMapController) {
/// }
///
/// func mapDidDisplayRouteSetup(mapController: VMEMapController) {
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMELifeCycleListener_")
@protocol VMELifeCycleListener <NSObject>
@optional
/// Invoked when the 3D rendering engine has been initialized
/// version:
/// 1.13
/// \param mapController The originator of the notification
///
- (void)mapDidInitializeEngineWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the map bundle has been loaded and is ready to gain focus
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDataDidLoadWithMapController:(VMEMapController * _Nonnull)mapController venueData:(NSDictionary<NSString *, id> * _Nonnull)venueData;
/// Invoked when the map bundle has been loaded and is ready to gain focus
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapViewDidLoadWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the map has returned to normal focus.
/// note:
///
/// Normal focus indicates that:
/// - the map surfaces have been loaded and
/// - no other views appear above the map.
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidGainFocusWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when a route is displayed within the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
/// \param result The result object containing information related to the displayed route
///
- (void)mapDidDisplayRouteWithMapController:(VMEMapController * _Nonnull)mapController result:(VMERouteResult * _Nonnull)result;
/// Invoked when the poi info is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
/// \param poiID The poi ID of the poi info being displayed
///
- (void)mapDidDisplayPoiInfoWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID;
/// Invoked when the search view is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidDisplaySearchWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when the route setup view is displayed above the map
/// version:
/// 1.12
/// \param mapController The originator of the notification
///
- (void)mapDidDisplayRouteSetupWithMapController:(VMEMapController * _Nonnull)mapController;
/// Invoked when an error occured
/// version:
/// 2.0
/// \param mapController The originator of the notification
///
- (void)mapErrorWithError:(NSString * _Nonnull)error;
@end


/// A VMELocation object incorporates the position within the map as well as values indicating the accuracy of the measurements and the bearing in which the location is moving.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential11VMELocation")
@interface VMELocation : NSObject <NSCopying>
/// The physical position within the map.
/// version:
/// 1.2
@property (nonatomic, readonly, strong) VMEPosition * _Null_unspecified position;
/// Horizontal accuracy.  The radius of uncertainty for the location, measured in meters.
/// version:
/// 1.2
@property (nonatomic, readonly) double accuracy;
/// The direction in which the device is traveling.
/// version:
/// 1.2
@property (nonatomic, readonly) double bearing;
/// Instantiate a new instance of VMELocation
/// version:
/// 1.2
/// \param position The position of the location.  The position is represented graphically within the map.
///
/// \param bearing The bearing of the location. The bearing is used to orient the camera when location tracker is enabled. Negative values will be ignored.
///
/// \param accuracy The radius of uncertainty for the location, measured in meters.  The accuracy is represented graphically within the map.  Negative values will be ignored.
///
///
/// returns:
/// A new VMELocation object.
- (nonnull instancetype)initWithPosition:(VMEPosition * _Nullable)position bearing:(double)bearing accuracy:(double)accuracy OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

/// The tracking mode controls the location tracking
/// version:
/// 1.19
typedef SWIFT_ENUM(NSInteger, VMELocationTrackingMode, open) {
/// In none mode, the following occurs:
/// There is no location tracking
/// version:
/// 1.19
  VMELocationTrackingModeNone = 0,
/// In custom mode, the following occurs:
/// Use a custom location tracker provided by the integrators
/// version:
/// 1.19
  VMELocationTrackingModeCustom = 1,
/// In follow mode , the following occurs:
/// Use the location tracker provided by the SDK
/// version:
/// 1.19
  VMELocationTrackingModeFollow = 2,
};


/// Interface definition of methods that are invoked when location tracking mode related events occur.
/// version:
/// 1.19
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundle"
///         builder.mapHash = "mc8f3fec89d2b7283d15cfcf4eb28a0517428f054"
///         builder.mapSecretCode = 0
///     })
///     mMapController.loadMapData()
///     
///     mMapController.setLifeCycleListener(self)
///     mMapController.setLocationTrackingModeListener(self)
/// }
///
/// func mapDidUpdateTrackingMode(mapController: VMEMapController,trackingMode: VMELocationTrackingMode) {
///    // ...
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential31VMELocationTrackingModeListener_")
@protocol VMELocationTrackingModeListener <NSObject>
@optional
/// Notifies the listener that the tracking mode has been updated.
/// version:
/// 1.19
/// \param mapController The originator of the notification
///
/// \param locationTrackingMode The new tracking mode
///
- (void)mapDidUpdateTrackingModeWithMapController:(VMEMapController * _Nonnull)mapController trackingMode:(enum VMELocationTrackingMode)trackingMode;
@end

typedef SWIFT_ENUM(NSInteger, VMEManeuverType, open) {
  VMEManeuverTypeUnknown = 0,
/// Go straight
/// version:
/// 1.17
  VMEManeuverTypeGoStraight = 1,
/// Turn gentle right
/// version:
/// 1.17
  VMEManeuverTypeTurnGentleRight = 2,
/// Turn gentle left
/// version:
/// 1.17
  VMEManeuverTypeTurnGentleLeft = 3,
/// Turn right
/// version:
/// 1.17
  VMEManeuverTypeTurnRight = 4,
/// Turn left
/// version:
/// 1.17
  VMEManeuverTypeTurnLeft = 5,
/// Turn sharp right
/// version:
/// 1.17
  VMEManeuverTypeTurnSharpRight = 6,
/// Turn sharp left
/// version:
/// 1.17
  VMEManeuverTypeTurnSharpLeft = 7,
/// U-turn right
/// version:
/// 1.17
  VMEManeuverTypeUTurnRight = 8,
/// U-turn left
/// version:
/// 1.17
  VMEManeuverTypeUTurnLeft = 9,
/// Start
/// version:
/// 1.17
  VMEManeuverTypeStart = 10,
/// End
/// version:
/// 1.17
  VMEManeuverTypeEnd = 11,
/// Go up
/// version:
/// 1.17
  VMEManeuverTypeGoUp = 12,
/// Go down
/// version:
/// 1.17
  VMEManeuverTypeGoDown = 13,
/// Change modality
/// version:
/// 1.17
  VMEManeuverTypeChangeModality = 14,
/// Change layer
/// version:
/// 1.17
  VMEManeuverTypeChangeLayer = 15,
/// Waypoint
/// version:
/// 1.17
  VMEManeuverTypeWaypoint = 16,
};

@class VMEMapControllerBuilder;
@class VMEMapDescriptor;
@class VMEMapView;
@protocol VMEMapListener;
@protocol VMEPoiListener;
@protocol VMENavigationListener;
@class VMESceneUpdate;
@class UIColor;
@class VMEPoiSize;
@class VMEPoiFilter;
@protocol VMEPoiFilterCallback;
@class VMEPoi;
@class CLLocation;
@protocol VMESearchViewCallback;
@class UIView;
@class UIImage;

/// This is the main class of VisioMove Essential for iOS and is the entry point for all methods related to the map.
/// <ul>
///   <li>
///     Description: The map controller can be created with the <em>initController</em> class method and calling <em>loadMapData</em> method on it.
///   </li>
/// </ul>
/// \code
/// mMapController = VMEMapController.initController(builderBlock: { builder in
///     builder.mapPath = "MapBundleTheme"
///     builder.mapSecretCode = 0
/// })
/// mMapController.loadMapData();
///
/// \endcodeVMEMapController can only be read and modified from the main thread, similar
/// to all UIKit objects. Calling these methods from another thread will result in
/// an exception or undefined behavior.
/// version:
/// 2.0
SWIFT_CLASS("_TtC18VisioMoveEssential16VMEMapController")
@interface VMEMapController : NSObject
/// Loads map controller
/// This method must be called at least once in order for the controller to be loaded.
/// \code
/// mMapController = VMEMapController.initController(builderBlock: { builder in
///     builder.mapPath = "MapBundleTheme"
///     builder.mapSecretCode = 0
/// })
///
/// \endcodeversion:
/// 1.0
/// \param builderBlock represents a method called to build the block
///
/// \param builder closure returning builder for mapController
///
///
/// returns:
///
/// <ul>
///   <li>
///     Void
///   </li>
/// </ul>
+ (nonnull instancetype)initControllerWithBuilderBlock:(void (^ _Nonnull)(VMEMapControllerBuilder * _Nonnull))builderBlock SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Loads the map data using the current map configuration.  If the map is already loaded,
/// this will reload the map.
/// This method must be called at least once in order for the map to be loaded.
/// note:
/// If the map is already loaded, then VMEMapController::unloadMap should be called before calling
/// this method again.
/// version:
/// 2.0
///
/// returns:
/// Void
- (void)loadMapData;
/// Sets the directory path, relative to the main bundle, where the embedded map bundle will be loaded from.
/// version:
/// 1.0
/// \param pMapPath path
///
- (void)setMapPath:(NSString * _Nonnull)pMapPath;
/// Sets the target hash of the online map.
/// The hash is used for retrieving the map from a map server.
/// version:
/// 1.0
/// \param pMapHash hash
///
- (void)setMapHash:(NSString * _Nonnull)pMapHash;
/// Sets the embedded map’s secret code.
/// note:
/// The secret code is used to salt the map’s license.  Before authorizing the loading of the map, the secret code is validated with the map’s license.
/// version:
/// 1.0
/// version:
/// 1.9 Parameter type changed from String to int
/// \param pMapSecretCode secret code
///
- (void)setMapSecretCode:(NSInteger)pMapSecretCode;
/// Sets the map server url.
/// note:
/// If nil, the default map server path will be used. By default the map server URL is “https://mapserver.visioglobe.com”
/// version:
/// 1.0
/// \param pMapServerUrl url
///
- (void)setMapServerURL:(NSString * _Nonnull)pMapServerUrl;
/// Determines whether to prompt the user before downloading an online map.
/// If true, the user will be prompted.  Otherwise the online map will be downloaded automatically.
/// note:
/// By default this is set to true (i.e. the user will be prompted).
/// version:
/// 1.9
/// \param pEnable true or false
///
- (void)setPromptUserToDownloadMapWithEnable:(BOOL)enable;
/// Get cached Map descriptor
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.21
/// \code
/// let validMapHash = "me0ec793d46c4a804d5a4d1cc382c97719c0b54ac"
/// let mapDescriptor = mMapController?.getCachedMapDescriptor(identifier: validMapHash)
///
/// \endcode\param identifier The map hash who’s map descriptor is to be retrieved.
///
///
/// returns:
/// The map bundle descriptor that has been downloaded by the SDK. Will return nil if the map hash doesn’t have a corresponding downloaded map within the phone.
- (VMEMapDescriptor * _Nullable)getCachedMapDescriptorWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Deletes a map from the application that has been cached by the SDK.
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.21
/// \code
/// let validMapHash = "me0ec793d46c4a804d5a4d1cc382c97719c0b54ac"
/// do {
///    let ret = mMapController?.deleteCachedMap(identifier: validMapHash)
/// catch let error as NSError {
///     print(error)
/// }
///
/// \endcode\param identifier The map hash associated with the cached map that is to be deleted.
///
/// \param error Any information about an error condition that may have occured.
///
///
/// returns:
/// Returns true if the map was successfully deleted, otherwise false.
- (BOOL)deleteCachedMapWithIdentifier:(NSString * _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error;
/// Retrieve the current version of VisioMove Essential (iOS).
/// version:
/// 1.0
///
/// returns:
/// String
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the minimum version string major.minor.patch of the data that this
/// SDK can handle.
/// version:
/// 1.0
/// <ul>
///   <li>
///     Description: In other words, the map bundle must have been generated with
///     at least this SDK version, otherwise it will not be loaded.  You can find the
///     sdk_version that a map bundle was generated with within its descriptor.json file.
///   </li>
/// </ul>
///
/// returns:
/// String
- (NSString * _Nonnull)getMinDataSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the version string major.minor.patch of the data that this
/// SDK can handle.
/// version:
/// 1.21
/// <ul>
///   <li>
///     Description:
///     In other words, the map bundle’s minimum supported SDK must be less than or equal to this SDK version,
///     otherwise it will not be loaded.  You can find the sdk_min_version that a map bundle was generated
///     with within its descriptor.json file.
///   </li>
/// </ul>
///
/// returns:
/// String
- (NSString * _Nonnull)getDataSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Links MapView to map data when loaded.
/// note:
/// If the map data is already loaded, then map view will be displayed immediatly.
/// if the map data is not already loaded, then mapController will keep a reference of this View,
/// and map will be displayed as soon as map data is loaded.
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description: This method must be called at least once in order for the map to be viewed.
///   </li>
/// </ul>
/// \param mapView the VMEMapView which will display map
///
///
/// returns:
/// Void
- (void)loadMapViewWithMapView:(VMEMapView * _Nonnull)mapView;
/// Unloads the current map view.
/// note:
/// Only call once the previous map has finished loadMapView.
/// version:
/// 1.9
/// <ul>
///   <li>
///     Description: Unloading the map will undo any API calls requiring view made since the map is visible.
///   </li>
/// </ul>
///
/// returns:
/// Void
- (void)unloadMapView;
/// Unload map data
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description: This method unloads map data.
///   </li>
/// </ul>
///
/// returns:
/// Void
- (void)unloadMapData;
/// Set delegate to receive map related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param mapListener The listener delegate to receive notifications. Can be null.
///
- (void)setMapListener:(id <VMEMapListener> _Nonnull)mapListener;
/// Set delegate to receive building related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 1.17
/// \param buildingListener The listener delegate to receive notifications. Can be null.
///
- (void)setBuildingListener:(id <VMEBuildingListener> _Nonnull)buildingListener;
/// Set map listener delegate to receive location tracking mode related notifications.
/// version:
/// 1.19
/// \param locationTrackingModeListener The listener delegate to receive notifications. Can be null.
///
- (void)setLocationTrackingModeListener:(id <VMELocationTrackingModeListener> _Nonnull)locationTrackingModeListener;
/// Sets a listener that is invoked repeatedly while the camera is in motion.
/// version:
/// 1.24
/// note:
/// The listener may be invoked as often as once every frame and should not perform expensive operations.
/// \param cameraListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setCameraListener:(id <VMECameraListener> _Nonnull)cameraListener;
/// Sets a delegate to receive life cycle related notifications.
/// version:
/// 1.12
/// note:
/// To unset the listener, use nil.
/// \param lifeCycleListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setLifeCycleListener:(id <VMELifeCycleListener> _Nonnull)lifeCycleListener;
/// Sets a  delegate to receive poi related notifications.
/// version:
/// 1.12
/// note:
/// To unset the listener, use nil.
/// \param poiListener The listener that’s invoked. To unset the listener, use null.
///
- (void)setPoiListener:(id <VMEPoiListener> _Nonnull)poiListener;
/// Set delegate to receive navigation related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param navigationListener The listener delegate to receive notifications. Can be null.
///
- (void)setNavigationListener:(id <VMENavigationListener> _Nonnull)navigationListener;
/// Set index for instruction.
/// version:
/// 2.0
/// \param instructionIndex The index for current instruction
///
- (void)setNavigationIndex:(NSInteger)navigationIndex;
/// Set delegate to receive compass related notifications.
/// note:
/// To unset the listener, use nil.
/// version:
/// 2.0
/// \param compassListener The listener delegate to receive notifications. Can be null.
///
- (void)setCompassListener:(id <VMECompassListener> _Nonnull)compassListener;
/// Repositions the camera according to the instructions defined in the update.
/// The update is instantaneous.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingCurrent()
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
///
/// mMapController.updateCamera(lUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)updateCamera:(VMECameraUpdate * _Nonnull)update;
/// Animates the movement of the camera from the current position to the position defined in the update.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingWithPoiID(poiID: "B2")
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
/// mMapController.animateCamera(lUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)animateCamera:(VMECameraUpdate * _Nonnull)update;
/// Animates the movement of the camera from the current position to the position defined in the update.
/// note:
/// See VMECameraUpdate for the available update constructors.
/// version:
/// 1.7
/// \code
/// let lUpdate = VMECameraUpdate.initCameraUpdate(builderBlock: { builder in
///    builder.targets = ["B2-UL00"]
///    builder.heading = VMECameraHeading.initCameraHeadingWithPoiID(poiID: "B2")
///    builder.viewMode = VMEViewMode.floor
///    builder.distanceRange = VMECameraDistanceRange.initRadiusRange(minRadius: 40, maxRadius: 200)
///    builder.pitch = VMECameraPitch.initCameraPitch(value: -30)
/// })
/// mMapController.animateCamera(lUpdate, duration: 0.7, callback: self)
///
/// \endcode\param update The <em>update</em> to apply.
///
/// \param duration The <em>duration</em> (in seconds) of the camera animation.
///
/// \param callback The <em>callback</em> to be notified of any animation events.  Can pass nil if indifferent to animation events.
///
- (void)animateCamera:(VMECameraUpdate * _Nonnull)update duration:(double)duration callback:(id <VMEAnimationCallback> _Nullable)callback;
/// Updates the change of scene from the current scene to the scene defined in the update.  The update is instantaneous.
/// note:
/// See VMESceneUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lSceneUpdate = VMESceneUpdate.sceneUpdate(viewMode: VMEViewMode.floor, floorID:"B2-UL00")
/// mMapController.updateScene(lSceneUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)updateScene:(VMESceneUpdate * _Nonnull)update;
/// Updates the change of scene from the current scene to the scene defined in the update.  The update is instantaneous.
/// note:
/// See VMESceneUpdate for the available update constructors.
/// version:
/// 1.2
/// \code
/// let lSceneUpdate = VMESceneUpdate.sceneUpdate(viewMode: VMEViewMode.floor, floorID:"B2-UL00")
/// mMapController.animateScene(lSceneUpdate)
///
/// \endcode\param update The <em>update</em> to apply.
///
- (void)animateScene:(VMESceneUpdate * _Nonnull)update;
/// Set focus on map - map state
/// note:
/// calling setFocusOnMap() close other view components such as the navigation, the search view or the poi info view… The map is clean from other views.
/// version:
/// 1.19
/// \code
/// mMapController.setFocusOnMap()
///
/// \endcode
- (void)setFocusOnMap;
/// Gets the current context of the camera.
/// The VMECameraContext returned is a snapshot of the current context, and will not automatically update when the camera moves.
/// version:
/// 1.24
///
/// returns:
/// The current camera context
- (VMECameraContext * _Nullable)getCameraContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the last move reason of the camera.
/// version:
/// 1.25
///
/// returns:
/// The last camera move reason
- (enum VMECameraMoveReason)getCameraMoveReason SWIFT_WARN_UNUSED_RESULT;
/// Requests that a route be computed.
/// version:
/// 1.0
/// version:
/// 1.2 The callback parameter is now required by this method in order to handle the result.
/// \code
/// let lRouteRequest = VMERouteRequest(requestType: VMERouteRequestType.fastest, destinationsOrder: VMERouteDestinationsOrder.optimal, accessible: true)
/// lRouteRequest.setOrigin("B1-UL00-ID0039")
/// let _ = lRouteRequest.addDestinations(["B4-UL04-ID0005", "B3-LL01-ID0004"])
///
/// mMapController.computeRoute(lRouteRequest, callback: self)
///
/// \endcode\param routeRequest The <em>route</em> request.
///
/// \param callback The <em>callback</em> to invoke with the result.
///
- (void)computeRoute:(VMERouteRequest * _Nonnull)routeRequest callback:(id <VMEComputeRouteCallback> _Nullable)callback;
/// Get modalities
/// version:
/// 1.6
/// \code
/// var lModalities = mMapController.getModalities()
///
/// \endcode
/// returns:
/// An array of all modality names that are present within the map’s routing network.
- (NSArray<NSString *> * _Nonnull)getModalities SWIFT_WARN_UNUSED_RESULT;
/// Get modalities
/// version:
/// 1.6
/// \code
/// var lModalities = mMapController.getAttributes()
///
/// \endcode
/// returns:
/// An array of all modality names that are present within the map’s routing network.
- (NSArray<NSString *> * _Nonnull)getAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)setExcludedModalities:(NSArray<NSString *> * _Nonnull)modalities;
/// Sets the modalities that will be excluded from the routing network when a route is computed.
/// note:
/// The set excluded modalities will be used in addition to the accessible excluded modalities if the user chooses an accessible route.
/// version:
/// 1.6
/// \code
/// mMapController.setExcludedModalities(["UserProfile1", "UserProfile2"]])
///
/// \endcode\param modalities An array of modality names to be excluded.  If nil or empty, then any previously excluded modalities will be removed.
///
- (void)setExcludedAttributes:(NSArray<NSString *> * _Nonnull)attributes;
/// Update the poi’s color.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// version:
/// 1.7 Now also applies to static poi icons and  pois.
/// \param poiID The poi ID who’s data is to change
///
/// \param color The color to apply to the poi.
///
///
/// returns:
/// true if the pois data was updated, otherwise false.
- (BOOL)setPoiColor:(NSString * _Nonnull)poiID color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Reset the poi’s color back to it’s initial value.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// version:
/// 1.8 Now also applies to icons and pois.
/// \param poiID The poi ID who’s data is to change
///
///
/// returns:
/// true if the pois data was updated, otherwise false.
- (BOOL)resetPoiColorWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Adds or update some POIs on the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// note:
/// Json must be formatted like this:
/// {
/// “PoiID_1”: {
/// “name”: “The name of the POI - label on surface and name search / Place information / routing “,
/// “description”: “Used in place Information”,
/// “categories: [“CategoryID_1”, “CategoryID_2”,”…” ], // Array of categoryID String
/// “icon”: “String: path to icon used on place information / search / routing - PNG file - can be an relative path, or an url like http://, https://, data:image/png;base64,”,
/// “features”: {
/// “surface”: {“color”:”#0000FF - color in hexadecimal format starting by #”},
/// “image”: {
/// “icon”: “String: path to icon used on map - can be an relative path, or an url like http://, https://, data:image/png;base64,”,
/// “scale”:1.0, // Double - Icon size on map
/// “position”:[45.74094,4.88483,0.0], // Array of Double:  Lat, Lon, Alt
/// “orientation”:[
/// “facing | fixedWithHeading | flat”, // facing: Place is always camera facing, fixedWithHeading: Place is flat on ground and has a fixed heading, flat: Place is flat on ground and facing camera
/// 30.0  // if fixedWithHeading, needs a Double after
/// ],
/// “anchorMode”: “topLeft” | “topCenter” | “topRight” | “centerLeft” | “center” | “centerRight” | “bottomLeft” | “bottomCenter” | “bottomRight” , // An anchor mode determines how an object is anchored to a given position within the map
/// “altitudeMode”:“relative” | “absolute”, // relative :The altitude is interpreted relative to the terrain, absolute: The altitude is interpreted as the height above the WGS84 ellipsoid.
/// “displayMode”:“overlay” | “inlay”, // inlay: The place will obscured when located behind map surfaces, overlay: The place is displayed on top of all map surfaces, regardless of whether they are physical infront of the place.
/// “visibilityRamp”:[2.0,5.0,2000.0,5000.0] // Array of 4 Double [startVisible, fullyVisible, startInvisible, fullyInvisible]
/// }
/// }
/// },
/// “PoiID_2”: {}
/// }
/// version:
/// 2.0
/// \code
/// let poiData = """
///     {
///        "samplePoiID":{
///           "name":"Cat - Map bundle",
///           "description":"<b>Map Bundle</b> <hr> The icon comes from the map bundle.",
///           "categories":["2", "3", "99"],
///           "icon":"/media/map/visio_island_essentials/category_exhibition.png",
///           "features":{
///
///              "surface": {"color":"#0000FF"},
///
///              "image":{
///                 "icon":"/media/map/visio_island_essentials/category_exhibition.png",
///                 "scale":1.0,
///                 "position":[45.74094,4.88483,0.0],
///                 "orientation":[
///                    "facing",
///                    30.0
///                 ],
///                 "anchorMode":"bottomCenter",
///                 "altitudeMode":"relative",
///                 "displayMode":"overlay",
///                 "visibilityRamp":[2.0,5.0,2000.0,5000.0]
///              }
///           }
///        }
///        """
/// let result = self.mMapController.setPois(data: poiData)
///
/// \endcode\param data a JSON string
///
///
/// returns:
/// a dictionary of errors or warnings.
- (NSDictionary<NSString *, id> * _Nonnull)setPoisWithData:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Adds or update some categories.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// note:
/// Json must be formatted like this:
/// {
/// “CategoryID_1”: {
/// “name”: “A String”,
/// “icon”: “String: path to icon used on map - can be an relative path, or an url like http://, https://, data:image/png;base64,”
/// },
/// “CategoryID_2”: {}
/// }
/// version:
/// 2.0
/// \code
/// let categoryData = """
///     {
///         "CategogyID": {
///             "name": "The name",
///             "icon": "media/map/visio_island_essentials/category_service.png"
///         }
///    }
///    """
/// let result = self.mMapController.setCategories(data: categoryData)
///
/// \endcode\param data a JSON string
///
///
/// returns:
/// a dictionary of errors or warnings.
- (NSDictionary<NSString *, id> * _Nonnull)setCategoriesWithData:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Set a group of poi colors in one call.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.15
/// \param poiIDToColor A dictionary of poiID to color.
///
///
/// returns:
/// true if all poi colors were updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisColorWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs colors:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// Reset a group of pois to their original colors in one call.
/// The color reset is batched.  The map will be non-responsive while the surface colors are being reset.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.15
/// \param poiIDs An array of poiIDs to be reset.
///
///
/// returns:
/// true if all poi colors were updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)resetPoisColorWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs SWIFT_WARN_UNUSED_RESULT;
/// Remove the poi from the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be removed.
///
///
/// returns:
/// true if the poi was removed, otherwise false.
- (BOOL)removePoiWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Remove the pois from the map.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of ID reprensenting the pois to be removed.
///
///
/// returns:
/// array of Boolean : true if the poi was removed, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)removePoisWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs SWIFT_WARN_UNUSED_RESULT;
/// Update the poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be moved.
///
/// \param position The poi’s new position
///
/// \param animated Determines whether the change should be animated.
///
///
/// returns:
/// true if the poi’s position was updated, otherwise false.
- (BOOL)setPoiPositionWithPoiID:(NSString * _Nonnull)poiID position:(VMEPosition * _Nonnull)position animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Update multiple poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of IDs of the poi to be removed.
///
/// \param positions An array of poi’s new position
///
/// \param animated An array of boolean: Determines whether the change should be animated.
///
///
/// returns:
/// an Array of Boolean: true if the poi’s position was updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisPositionWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs positions:(NSArray<VMEPosition *> * _Nonnull)positions animated:(NSArray<NSNumber *> * _Nonnull)animated SWIFT_WARN_UNUSED_RESULT;
/// Update the poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param poiID The ID of the poi to be scaled.
///
/// \param size Update the poi’s size.
///
/// \param animated Determines whether the change should be animated.
///
///
/// returns:
/// true if the poi’s size was updated, otherwise false.
- (BOOL)setPoiSizeWithPoiID:(NSString * _Nonnull)poiID size:(VMEPoiSize * _Nonnull)size animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Update multiple poi’s position.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 2.0
/// \param poiIDs An array of ID of the poi to be scaled.
///
/// \param sizes Array of poi’s size.
///
/// \param animated Array of Boolean: Determines whether the change should be animated.
///
///
/// returns:
/// Array of Boolean: true if the poi’s size was updated, otherwise false.
- (NSArray<NSNumber *> * _Nonnull)setPoisSizeWithPoiIDs:(NSArray<NSString *> * _Nonnull)poiIDs sizes:(NSArray<VMEPoiSize *> * _Nonnull)sizes animated:(NSArray<NSNumber *> * _Nonnull)animated SWIFT_WARN_UNUSED_RESULT;
/// Queries all poi IDs within the map.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidInitializeEngine: notification
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.4
///
/// returns:
/// An array of poi IDs within the map.  Will return an empty array if called before the map has correctly loaded.
- (NSArray<NSString *> * _Nonnull)queryAllPoiIDs SWIFT_WARN_UNUSED_RESULT;
- (void)queryPoisWith:(VMEPoiFilter * _Nonnull)filter callback:(id <VMEPoiFilterCallback> _Nullable)callback;
/// Returns a requested poi.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     pois
///   </li>
/// </ul>
/// version:
/// 1.10
/// \param poiID The ID of the poi to return.
///
///
/// returns:
/// A poi object that corresponds to the poi ID, or null if ID doesn’t exist.
- (VMEPoi * _Nullable)getPoiWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Queries all category IDs within the map.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.10
///
/// returns:
/// An array of category IDs within the map.  Will return an empty array if called before the map has correctly loaded.
- (NSArray<NSString *> * _Nonnull)queryAllCategoryIDs SWIFT_WARN_UNUSED_RESULT;
/// Returns a requested category.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// note:
/// Applies to:
/// <ul>
///   <li>
///     categories
///   </li>
/// </ul>
/// version:
/// 1.10
/// \param categoryID The ID of the category to return.
///
///
/// returns:
/// A category object that corresponds to the category ID, or null if ID doesn’t exist.
- (VMECategory * _Nullable)getCategoryWithCategoryID:(NSString * _Nonnull)categoryID SWIFT_WARN_UNUSED_RESULT;
/// Returns a poi’s center position.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.16
/// \param poiID The ID of the poi in question
///
///
/// returns:
/// The poi’s center position.
- (VMEPosition * _Nullable)getPoiPositionWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Returns The poi’s bounding box.
/// note:
/// Can be called during or after the VMELifeCycleListener::mapDidLoad: notification.
/// version:
/// 1.16
/// \param poiID The ID of the poi in question
///
///
/// returns:
/// An array of positions that represent the pois bounding box
- (NSArray<VMEPosition *> * _Nonnull)getPoiBoundingPositionsWithPoiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Updates the uses current physical location within the map.
/// note:
/// Calls to this method before VMELifeCycleListener::mapDidLoad: is called will be ignored.
/// version:
/// 1.0
/// version:
/// 1.2 Change update parameter from CLLocation to VMELocation.
/// \code
///     func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
///         if let lCLLocation = locations.last{
///             mLocation = mMapController.createLocationFromLocation(lCLLocation)
///             mMapController.updateLocation(mLocation)
///         }
///     }
///
/// \endcode\param update The location update to apply.  If nil is passed, then the current location will be removed from the map.
///
///
/// returns:
/// A category object that corresponds to the category ID, or null if ID doesn’t exist.
- (void)updateLocation:(VMELocation * _Nullable)update;
/// Takes a native location object and converts it to a VisioMove Essential object.
/// Uses the geo-fences within the map bundle to determine if the location falls within a building and if so, what floor.
/// note:
/// The CLLocation’s floor property is currently ignored.  Please use the altitude property to determine the physical floor.
/// note:
/// By setting the CLLocation’s verticalAccuracy to -1, the VMELocation will be forced to the outside (independent of whether it falls within a building’s geo-fence).
/// note:
/// This method will return nil if called prior to VMELifeCycleListener::mapDidLoad:.
/// version:
/// 1.2
/// \param location A location object.  The ‘altitude’ attribute will be used to determine the correct floor.
///
///
/// returns:
/// A VMELocation indicating the location within the venue, or nil if the location is invalid or does exist not within the venue.
- (VMELocation * _Nullable)createLocationFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Takes a native location object and converts it to a VisioMove Essential object.
/// Uses the geo-fences within the map bundle to determine if the location falls within a builing and if so, what floor.
/// note:
/// By setting the CLLocation’s verticalAccuracy to -1, the VMEPosition will be forced to the outside (independent of whether it falls within a building’s geo-fence).
/// note:
/// This method will return nil if called prior to VMELifeCycleListener::mapDidLoad:.
/// version:
/// 1.2
/// \param location A location object.  The ‘altitude’ attribute will be used to determine the correct floor.
///
///
/// returns:
/// A VMEPosition indicating the location within the venue, or nil if the location is invalid or does not exist within the venue.
- (VMEPosition * _Nullable)createPositionFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Change the value of the location tracking mode
/// note:
/// This method will do nothing if there is no location provided to the mapView
/// note:
/// see VMELocationTrackingMode
/// version:
/// 1.19
/// \param trackingMode A tracking mode that will be applied immediately
///
///
/// returns:
/// A VMEPosition indicating the location within the venue, or nil if the location is invalid or does not exist within the venue.
- (void)setLocationTrackingMode:(enum VMELocationTrackingMode)trackingMode;
- (void)setLocationTrackingButtonToggleModes:(NSArray<NSString *> * _Nonnull)trackingModes;
- (enum VMELocationTrackingMode)getLocationTrackingMode SWIFT_WARN_UNUSED_RESULT;
/// Get the current location tracking mode
/// note:
/// see VMELocationTrackingMode
/// version:
/// 1.19
///
/// returns:
/// The current tracking mode, default is ::VMELocationTrackingModeNone
- (NSArray<NSString *> * _Nonnull)getLocationTrackingButtonToggleModeStrings SWIFT_WARN_UNUSED_RESULT;
/// Control whether the selector view is visible.  If the selector view is not visible, it will be the integrator’s responsibility to provide a floor change mechanism.
/// note:
/// This method will not return the map descriptor of the application’s embedded map.
/// version:
/// 1.9
/// \param visible If true, then the selector view will be visible.  Otherwise, the selector view will be hidden.
///
- (void)setSelectorViewVisible:(BOOL)visible;
/// Gets visibility of selector view.
/// note:
/// see For more info VMEMapView::setSelectorViewVisible:
/// version:
/// 1.9
///
/// returns:
/// A boolean indicating whether the selector view is visible or not.
- (BOOL)getSelectorViewVisible SWIFT_WARN_UNUSED_RESULT;
/// Control whether the navigation header view is visible.  If the navigation header view is not visible, it will be the integrator’s responsibility to provide a mechanism for the end user to close the navigation in progress.
/// note:
/// to close the navigation in progress without the navigation header, use the method mapView.setFocusOnMap()
/// note:
/// VMEMapInterface::setFocusOnMap();
/// version:
/// 1.19
/// \param visible If true, , then the navigation header view will be visible when a navigation is in progress.  Otherwise, the navigation header iew will be hidden.
///
- (void)setNavigationHeaderViewVisible:(BOOL)visible;
/// Gets navigation header view visibility.
/// note:
/// see For more info VMEMapView::setSelectorViewVisible:
/// version:
/// 1.9
///
/// returns:
/// A boolean indicating whether the navigation view will be visible when a navigation is in progress.
- (BOOL)getNavigationHeaderViewVisible SWIFT_WARN_UNUSED_RESULT;
/// showSearchViewWithTitle: Display search view with title
/// version:
/// 1.0
/// \code
///    showSearchViewWithTitle("Search Title", {})
///
/// \endcode\param title The <em>title</em> component of the vector.
///
/// \param callback The <em>callback</em> called at the end of displaying search view
///
///
/// returns:
/// Void
- (void)showSearchViewWithTitle:(NSString * _Nonnull)title callback:(id <VMESearchViewCallback> _Nullable)callback;
/// Overrides the map’s default font (currently DejaVuSans.ttf).
/// note:
/// Should be called within the VMELifeCycleListener::mapDidInitializeEngine: notification.
/// version:
/// 1.13
/// \code
/// let lFontFile = Bundle.main.path(forResource: "artifika_regular", ofType: "ttf")!;
/// let _ = mMapController.setMapFont(lFontFile);
///
/// \endcode\param filePath The TrueType Font file (*.ttf) to load. The font will be searched locally in the map bundle’s “config” directory otherwise use an absolute path.
///
///
/// returns:
/// true if the font file was set successfully, otherwise no.
- (BOOL)setMapFontWithFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// Displays info related to the poi
/// version:
/// 1.19
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Focus the camera on the poi
///       </li>
///       <li>
///         Open the poi info view.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.showPoiInfo(poiID: "B1-UL00-ID0039")
///
/// \endcode\param poiID The poi whos information will be displayed.
///
- (void)showPoiInfoWithPoiID:(NSString * _Nonnull)poiID;
/// Adds a native overlay view above the map that’s associated with a position.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let lPos = VMEPosition(latitude: 45.74271, longitude: 4.88076, altitude: 0, scene: VMESceneContext(buildingID: "B4", floorID: "B4-UL01"))
///    let _ = mMapController.addOverlayViewID("Overlay4", view: lView, position: lPos)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param position The position to which the overlay view will be anchored.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a position.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.14
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let lPos = VMEPosition(latitude: 45.74271, longitude: 4.88076, altitude: 0, scene: VMESceneContext(buildingID: "B4", floorID: "B4-UL01"))
///    let _ = mMapController.addOverlayViewID("Overlay4", view: lView, position: lPos, anchorMode:.centerLeft)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param position position The position to which the overlay view will be anchored.  The bottom center of the view will be tied to the position.
///
/// \param anchorMode The part of the view to be anchored to the map.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view position:(VMEPosition * _Nonnull)position anchorMode:(enum VMEAnchorMode)anchorMode SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a poi.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let _ = mMapController.addOverlayViewID("Overlay2", view: lView, poiID: "B4-UL00-ID0015")
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param poiID The view will be anchored to the center point of the poi
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view poiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Adds a native overlay view above the map that’s associated with a poi.
/// note:
/// By default the anchor mode will be set to ::VMEAnchorModeBottomCenter.
/// version:
/// 1.1
/// \code
///     var lView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)
///     // overlay on outside poi
///    let _ = mMapController.addOverlayViewID("Overlay2", view: lView, poiID: "B4-UL00-ID0015", anchorMode:.center)
///
/// \endcode\param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param view The native view to added to the map.
///
/// \param poiID The view will be anchored to the center point of the poi
///
/// \param anchorMode The part of the view to be anchored to the map.
///
///
/// returns:
/// true if the overlay was added to the map, otherwise no.
- (BOOL)addOverlayViewWithOverlayViewID:(NSString * _Nonnull)overlayViewID view:(UIView * _Nonnull)view poiID:(NSString * _Nonnull)poiID anchorMode:(enum VMEAnchorMode)anchorMode SWIFT_WARN_UNUSED_RESULT;
/// Sets the position of the overlay view
/// version:
/// 1.1
/// \param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param position position The position to update
///
///
/// returns:
/// true if the overlay has been updated, otherwise no.
- (BOOL)setOverlayAnchorWithOverlayViewID:(NSString * _Nonnull)overlayViewID position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
/// Sets the poi of the overlay view
/// version:
/// 1.1
/// \param overlayViewID The id to given to overlay view.  Must be unique.
///
/// \param poiID The poi id to update
///
///
/// returns:
/// true if the overlay has been updated, otherwise no.
- (BOOL)setOverlayAnchorWithOverlayViewID:(NSString * _Nonnull)overlayViewID poiID:(NSString * _Nonnull)poiID SWIFT_WARN_UNUSED_RESULT;
/// Removes the overlay view from the map.
/// version:
/// 1.1
/// \param overlayViewID The id of the overlay view to remove.
///
///
/// returns:
/// true if the overlay has been removed, otherwise no.
- (BOOL)removeOverlayViewWithOverlayViewID:(NSString * _Nonnull)overlayViewID SWIFT_WARN_UNUSED_RESULT;
/// Control the visibility of the compass heading marker.
/// The compass heading marker is associated with the location overlay and indicates the orientation of the device.
/// version:
/// 1.23
/// \param visible If true, , then the compass heading marker is visible.  Otherwise, it will be hidden.
///
- (void)setCompassHeadingMarkerVisible:(BOOL)visible;
/// Retrieve the visibility of the compass heading marker.
/// note:
/// see For more info VMEMapView::setCompassHeadingMarkerVisible:
/// version:
/// 1.23
///
/// returns:
/// A boolean indicating whether whether the compass heading is visible or not.
- (BOOL)getCompassHeadingMarkerVisible SWIFT_WARN_UNUSED_RESULT;
/// Fetch the custom data from server
/// version:
/// 1.1
/// \code
/// mMapView.refreshCustomData(withSuccessBlock: { [self] in
///     // success - do something with data
///     NSMutableDictionary * lDict = mMapView.getCustomDatafromCache()
/// }) { lError in
///     // error
/// }
///
/// \endcode\param successBlock custom data has been fetched.
///
/// \param errorBlock if there was an error fetching custom data.
///
- (void)fetchCustomDataWithSuccessBlock:(void (^ _Nonnull)(void))successBlock andErrorBlock:(void (^ _Nonnull)(NSError * _Nullable))errorBlock;
/// Returns all pois custom data.
/// version:
/// 1.27
///
/// returns:
/// Dictionary containing all custom data values
- (NSDictionary * _Nullable)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// get the statistics logging state.
/// note:
/// This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLog()
///
/// \endcode
- (BOOL)isStatisticsLog SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogCamera: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogCamera()
///
/// \endcode
- (BOOL)isStatisticsLogCamera SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogInterest: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogInterest()
///
/// \endcode
- (BOOL)isStatisticsLogInterest SWIFT_WARN_UNUSED_RESULT;
/// See setStatisticsLogLocation: for more info on what this returns.
/// Returns: Whether enabled or not.
/// Note: This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.5
/// \code
/// let ret = mapController.isStatisticsLogLocation()
///
/// \endcode
- (BOOL)isStatisticsLogLocation SWIFT_WARN_UNUSED_RESULT;
/// Set the statistics logging.  This attribute is the main switch for logging statistics.
/// note:
/// If enabled, then the requested statistics will be logged. If disabled, none of the requested statistics will be logged.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLog(true)
///
/// \endcode\param pEnabled enabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLog:(BOOL)pEnabled;
/// Set the statistics camera logging.  If enabled, the camera’s ground focus position will be logged at regular intervals during the end users interactions with the map.
/// note:
/// mapController.setStatisticsLog(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLogCamera(true)
///
/// \endcode\param enabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogCamera:(BOOL)pEnabled;
/// Set the statistics location logging.  If enabled, the location received from VMELocationInterface::updateLocation: will be logged at regular intervals while location updates are received.
/// note:
/// mapController.setStatisticsLogLocation(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// \code
/// mapController.setStatisticsLogLocation(true)
///
/// \endcode\param enabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogLocation:(BOOL)pEnabled;
/// Set the statistics interest logging.  If enabled, the user’s map interests will be logged.
/// note:
/// mapController.setStatisticsLogInterest(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.5
/// <ul>
///   <li>
///     Interests include
///     <ul>
///       <li>
///         selected pois
///       </li>
///       <li>
///         route information (origin and destinations)
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mapController.setStatisticsLogInterest(true)
///
/// \endcode\param pEnabled pEnabled true to enable, false to disable it. Default is false.
///
- (void)setStatisticsLogInterest:(BOOL)pEnabled;
/// Set the statistics poi tracked position logging for a list of poi IDs.
/// Calling this will override any previous poi IDs that where being tracked.
/// note:
/// mapController.setStatisticsLogInterest(true) must be called before any logging will occur.
/// Will be ignored if called before mMapController.loadMapView(mapView: mapView).
/// View needs to be loaded before
/// version:
/// 1.18
/// \code
/// mapController.setStatisticsTrackedPoiIDs(["poiID1","poiID2"])
///
/// \endcode\param pTrackedPoiIDs An array of poi IDs to be tracked.  Pass empty array to stop tracking.
///
- (void)setStatisticsTrackedPoiIDs:(NSArray<NSString *> * _Nonnull)pTrackedPoiIDs;
/// See VMEMapView::setStatisticsTrackedPoiIDs: for more info on what this returns.
/// note:
/// This method should be called within or after VMELifeCycleListener::mapDidLoad: because it can be enabled via the application parameters.
/// version:
/// 1.18
/// \code
/// var trackedPoiList = mapController.getStatisticsTrackedPoiIDs()
///
/// \endcode
/// returns:
/// The poi ids who are currently being tracked.
- (NSArray<NSString *> * _Nullable)getStatisticsTrackedPoiIDs SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Map Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in Map Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromMapBundle("media/map/visio_island_essentials/category_restaurant.png")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromMapBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from VisioMoveEssential Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in VisioMoveEssential Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromVisioMoveEssentialBundle("icon_search")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromVisioMoveEssentialBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Main App Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in Main App Bundle using path
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mMapController.getImageFromMainBundle("my_app_image.png")
///
/// \endcode\param path The relative path.
///
///
/// returns:
///
/// <ul>
///   <li>
///     UIImage found, if not found returns nil
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageFromMainBundle:(NSString * _Nonnull)pPath SWIFT_WARN_UNUSED_RESULT;
/// Get Image from Main App Bundle
/// version:
/// 2.0
/// <ul>
///   <li>
///     Description:
///     <ul>
///       <li>
///         Search for an image in VisioMoveEssential Bundle using path and replace image’s RGB color by given colors
///       </li>
///       <li>
///         Call callback method using returned UIImage
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \code
/// mResourceManager.getImage(path: "close", foregroundColor: UIImage(color: .brown), backgroundColor: UIImage(color: .cyan), strokeColor: UIImage(color: .lightGray), callback: { [self] result in
///     DispatchQueue.main.async(execute: { [self] in
///         if result != nil {
///             self.myView.image = result
///         }
///     })
/// })
///
/// \endcode\param path The relative path.
///
/// \param foregroundColor green color on original image will be replaced by this color
///
/// \param backgroundColor blue color on original image will be replaced by this color
///
/// \param strokeColor red color on original image will be replaced by this color
///
/// \param callback method called with returned UIImage
///
- (void)getImageWithPath:(NSString * _Nonnull)pPath foregroundColor:(UIColor * _Nonnull)pForegroundColor backgroundColor:(UIColor * _Nonnull)pBackgroundColor strokeColor:(UIColor * _Nonnull)pStrokeColor callback:(void (^ _Nonnull)(UIImage * _Nullable))pCallback;
/// Enable / Disable compass.
/// version:
/// 2.0
/// \param enabled true if we want to enable compass
///
- (void)setCompassWithEnabled:(BOOL)enabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18VisioMoveEssential23VMEMapControllerBuilder")
@interface VMEMapControllerBuilder : NSObject
@property (nonatomic, copy) NSString * _Nonnull mapPath;
@property (nonatomic) NSInteger mapSecretCode;
@property (nonatomic, copy) NSString * _Nonnull mapHash;
@property (nonatomic, copy) NSString * _Nonnull mapServerURL;
@property (nonatomic) BOOL promptUserToDownloadMap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Interface definition of methods that are invoked when map data are loaded without display
/// version:
/// 2.0
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad();
///     
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapPath = "MapBundleTheme"
///         builder.mapSecretCode = 0
///     })
///     
///     mMapController.loadMapData()
///     mMapController.setLifeCycleListener(self)
/// }
/// func mapDataDidLoad(mapController: VMEMapController, venueData: [String:Any]) {
///     mMapController.loadMapView(mapView: mapView)
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential18VMEMapDataListener_")
@protocol VMEMapDataListener <NSObject>
@optional
/// Invoked when the map bundle data has been loaded and is ready
/// version:
/// 2.0
- (void)mapDataDidLoadWithVenueData:(NSDictionary<NSString *, id> * _Nonnull)venueData;
@end


/// The map descriptor object contains information related to it’s associated map bundle.
/// version:
/// v1.21
SWIFT_CLASS("_TtC18VisioMoveEssential16VMEMapDescriptor")
@interface VMEMapDescriptor : NSObject
/// Identifier of map (can be used within a filename).
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
/// The name of the map bundle, including it’s domain.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified name;
/// A timestamp indicating when the map was built (UTC + 0).
/// note:
/// The format of the timestamp is: YYYYMMDDHHMMSS
/// version:
/// v1.21
@property (nonatomic, readonly) int64_t timestamp;
/// A secret code that is required in order to load the map.
/// version:
/// v1.21
@property (nonatomic, readonly) NSInteger secretCode;
/// The expiry date of the map bundle. The format of the date is [string YYYY/MM/DD, ISO short format, UTC].
/// If the string is empty, then it indicates the map doesn’t have an expiry date.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified expiryDate;
/// The SDK type that this map descriptor represents.
/// note:
/// VisioMoveEssential expects the type to be “move”
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkType;
/// The SDK version that the map bundle was built for.
/// note:
/// For the map to be valid, this must be less than or equal to VMEMapController.minDataSDKVersion.
/// Otherwise the SDK has dropped support for this version of map bundle.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkVersion;
/// The minimum version of SDK that can load the map which this map descriptor represents.
/// note:
/// For the map to be valid, this must be greater than or equal to VMEMapController.dataSDKVersion.  Otherwise the map bundle is too recent for the SDK.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified sdkMinVersion;
/// The filename of the map bundle as stored on the map server.
/// version:
/// v1.21
@property (nonatomic, readonly, copy) NSString * _Null_unspecified zipFile;
/// The target of the map bundle.
/// version:
/// v1.27
@property (nonatomic, readonly, copy) NSString * _Null_unspecified path;
/// The target of the map bundle.
/// version:
/// v1.24
@property (nonatomic, readonly, copy) NSString * _Null_unspecified target;
/// The custom data hash.
/// version:
/// v1.27
@property (nonatomic, readonly, copy) NSString * _Null_unspecified customDataHash;
/// The layout data format
/// note:
/// Can be unified or move (undefined)
/// version:
/// v2.0
@property (nonatomic, readonly, copy) NSString * _Null_unspecified layout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// version:
/// v1.21
///
/// returns:
/// true if this map descriptor represents a map bundle that can loaded by this SDK, otherwise false.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

@class VMESceneContext;

/// Map listener to be notified of map related events occuring
/// on the VMEMapController object.
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     mMapController = VMEMapController.initController(builderBlock: { builder in
///         builder.mapHash = "mc8f3fec89d2b7283d15cfcf4eb28a0517428f054"
///     })
///     mMapController.loadMapData()
///     mMapController.setMapListener(self)
///     
/// }
///
/// func mapSceneDidUpdate(mapController: VMEMapController, scene: VMESceneContext, viewMode: VMEViewMode)  {
///     // ...
/// }
///
/// func mapDidReceiveTapGesture(mapController: VMEMapController, position: VMEPosition?) {
///     // ...
/// }
///
/// \endcodeversion:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential14VMEMapListener_")
@protocol VMEMapListener <NSObject>
@optional
/// Notifies the listener that the map’s scene or view mode has changed.
/// version:
/// 1.9
/// \param mapController The originator of the notification
///
/// \param scene The maps’s scene
///
/// \param viewMode The map’s view mode
///
- (void)mapSceneDidUpdateWithMapController:(VMEMapController * _Nonnull)mapController scene:(VMESceneContext * _Nonnull)scene viewMode:(enum VMEViewMode)viewMode;
/// Notifies the listener that a tap gesture has occurred on map view.
/// version:
/// 1.18
/// \param mapController The originator of the notification
///
/// \param position The position returned by the click in lat/lon coordinate - will be nil if you click outside of map
///
- (void)mapDidReceiveTapGestureWithMapController:(VMEMapController * _Nonnull)mapController position:(VMEPosition * _Nullable)position;
@end

@class NSCoder;
@class UITraitCollection;

/// This is the main UI View.
/// Used to display map inside.
/// The map view can be created either with the initWithFrame: method or within a nib.
/// VMEMapView can only be read and modified from the main thread, similar to all UIKit objects. Calling these methods from another thread will result in an exception or undefined behavior.
SWIFT_CLASS("_TtC18VisioMoveEssential10VMEMapView")
@interface VMEMapView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// This method will be automatically called by the system when the
/// VMEMapController has been added to a xib.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Callback protocol for receiving navigation results.  For computing a route and navigation see VMEMapController::computeRoute:callback:.
/// version:
/// 2.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential21VMENavigationListener_")
@protocol VMENavigationListener <NSObject>
/// Notified when instructions have been generated.
/// version:
/// 2.0
/// \param instructions An array of instructions
///
- (void)instructionsGeneratedWithInstructions:(NSArray<VMEInstruction *> * _Nonnull)instructions;
/// Notified when instructions has changed.
/// version:
/// 2.0
/// \param instructionIndex An index refering to current instruction
///
- (void)instructionIndexUpdatedWithInstructionIndex:(NSInteger)instructionIndex;
@end

@class NSURL;
enum VMEPoiAnchorMode : NSInteger;
enum VMEPoiAltitudeMode : NSInteger;
enum VMEPoiDisplayMode : NSInteger;
@class VMEPoiOrientation;
@class VMEPoiVisibilityRamp;

/// Represents a physical poi within the map
/// A Poi encapsulates information about a physical poi, including its name, description, categories and any other information we might have about it.
/// version:
/// 1.10
SWIFT_CLASS("_TtC18VisioMoveEssential6VMEPoi")
@interface VMEPoi : NSObject
/// The unique identifier of the poi
@property (nonatomic, copy) NSString * _Nonnull id;
/// The name associated with the poi.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The icon associated with the poi.  This will appear
@property (nonatomic, copy) NSString * _Nonnull icon;
/// The category id’s associated with the poi
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull categories;
@property (nonatomic, copy) NSURL * _Nullable imageURL;
@property (nonatomic, strong) VMEPosition * _Nullable position;
@property (nonatomic, strong) VMEPoiSize * _Nonnull size;
@property (nonatomic) enum VMEPoiAnchorMode anchorMode;
@property (nonatomic) enum VMEPoiAltitudeMode altitudeMode;
@property (nonatomic) enum VMEPoiDisplayMode displayMode;
@property (nonatomic, strong) VMEPoiOrientation * _Nonnull orientation;
@property (nonatomic, strong) VMEPoiVisibilityRamp * _Nonnull visibilityRamp;
/// A description in HTML for the poi.  The HTML may contain references to other media types, such as images and video.
/// These media types may be stored locally within the application or linked to a remote server.
@property (nonatomic, copy) NSString * _Null_unspecified htmlDescription;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum defines the possible altitude modes. An altitude mode determines how the altitude is interpreted.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiAltitudeMode, open) {
/// The altitude is interpreted relative to the terrain.
/// version:
/// 1.1
  VMEPoiAltitudeModeRelative = 0,
/// The altitude is interpreted as the height above the WGS84 ellipsoid
/// version:
/// 1.1
  VMEPoiAltitudeModeAbsolute = 1,
};

/// This enum defines the possible anchor modes.
/// An anchor mode determines how an poi object is anchored to a given position.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiAnchorMode, open) {
/// Anchor to the top left.
/// version:
/// 1.1
  VMEPoiAnchorModeTopLeft = 0,
/// Anchor to the top center
/// version:
/// 1.1
  VMEPoiAnchorModeTopCenter = 1,
/// Anchor to the top right
/// version:
/// 1.1
  VMEPoiAnchorModeTopRight = 2,
/// Anchor to the center left
/// version:
/// 1.1
  VMEPoiAnchorModeCenterLeft = 3,
/// Anchor to the center
/// version:
/// 1.1
  VMEPoiAnchorModeCenter = 4,
/// Anchor to the center right
/// version:
/// 1.1
  VMEPoiAnchorModeCenterRight = 5,
/// Anchor to the bottom left
/// version:
/// 1.1
  VMEPoiAnchorModeBottomLeft = 6,
/// Anchor to the bottom center
/// version:
/// 1.1
  VMEPoiAnchorModeBottomCenter = 7,
/// Anchor to the bottom right
/// version:
/// 1.1
  VMEPoiAnchorModeBottomRight = 8,
};

/// This enum defines the possible display modes. A display mode determines how the point is displayed within the map.
/// version:
/// 1.1
typedef SWIFT_ENUM(NSInteger, VMEPoiDisplayMode, open) {
/// The poi will obscured when located behind map surfaces.
/// version:
/// 1.1
  VMEPoiDisplayModeInlay = 0,
/// The poi is displayed on top of all map surfaces, regardless of whether they are physical infront of the poi.
/// version:
/// 1.1
  VMEPoiDisplayModeOverlay = 1,
};


/// An object that defines the criteria for performing a poi query.
/// version:
/// 1.8
SWIFT_CLASS("_TtC18VisioMoveEssential12VMEPoiFilter")
@interface VMEPoiFilter : NSObject
/// The target is the center point around which the filter parameters will be applied.
/// version:
/// 1.8
@property (nonatomic, readonly) id _Nullable target;
/// Restricts the poi results to this array of poi ids.
/// Useful when only interested in a certain group of pois (e.g. near by restaurants)
/// version:
/// 1.8
@property (nonatomic, copy) NSArray<NSString *> * _Nullable restrictToPoiIDs;
/// Restricts the poi results to the target’s layer.
/// By default, this is true.
/// version:
/// 1.8
@property (nonatomic) BOOL restrictToTargetLayer;
/// Defines the distance (in meters) within which to return poi results.
/// The distance between the target and poi is computed using the routing network.
/// By default, there is no restricted radius.
/// version:
/// 1.8
@property (nonatomic) double radius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Instantiates a route request
/// version:
/// 1.8
/// \param poiID The poi id to use as the target
///
- (nonnull instancetype)initWithPoiID:(NSString * _Nullable)poiID;
/// Instantiates a route request
/// version:
/// 1.8
/// \param position The position to use as the target
///
- (nonnull instancetype)initWithPosition:(VMEPosition * _Nullable)position;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end


/// A callback  protocol to receive poi filter query notifications.
/// version:
/// 1.8
SWIFT_PROTOCOL("_TtP18VisioMoveEssential20VMEPoiFilterCallback_")
@protocol VMEPoiFilterCallback <NSObject>
@optional
/// This method be will called by the SDK once the poi filter query has completed.
/// version:
/// 1.8
/// \param mapController The map view who received the compute route request
///
/// \param filter The original poi filter used for the query.
///
/// \param results An array of VMERouteResult objects sorted by distance in ascending order.  The list may be empty if the filter matched with no results.
///
- (void)poiFilterDidFinishWithMapController:(VMEMapController * _Nonnull)mapController parameters:(VMEPoiFilter * _Nonnull)filter results:(NSArray<VMERouteResult *> * _Nonnull)results;
@end


/// Interface definition of methods that are invoked when poi related events occur.
/// version:
/// 1.12
/// \code
/// class myClass: UIViewController, VMEPoiListener
///     override func viewDidLoad() {
///         super.viewDidLoad();
///         
///         mMapController = VMEMapController.initController(builderBlock: { builder in
///             builder.mapPath = "MapBundleTheme"
///             builder.mapSecretCode = 0
///         })
///         mMapController.setPoiListener(self)
///         mMapController.loadMapData()
///     }
///     func mapDidSelectPoi(mapController: VMEMapController, poiID: String,position: VMEPosition) -> Bool {
///        // ...
///        return true
///     }
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP18VisioMoveEssential14VMEPoiListener_")
@protocol VMEPoiListener <NSObject>
@optional
/// Notifies the listener that a poi has been selected.
/// note:
///
/// Applies to:
/// <ul>
///   <li>
///     static pois
///   </li>
///   <li>
///     dynamic pois
///   </li>
/// </ul>
/// version:
/// 1.1
/// \param mapController The originator of the notification
///
/// \param poiID The ID of the poi selected
///
/// \param position The physical position where the select event took poi within the map.
///
///
/// returns:
/// true if the listener consumes the event, false otherwise.
- (BOOL)mapDidSelectPoiWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID position:(VMEPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
@end


/// VMEPoiOrientation represents an orientation element that may be associated with a poi object.
/// It encapsulates some logic for controlling the camera’s heading. It should only be constructed using the factory helper methods below.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential17VMEPoiOrientation")
@interface VMEPoiOrientation : NSObject
+ (nonnull instancetype)initFacing SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initFlat SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)initFixedWithHeading:(double)pHeading SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that determines the size of the poi within the map
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential10VMEPoiSize")
@interface VMEPoiSize : NSObject
/// Controls the distance at which the poi does not become bigger as you approach it.
/// When the camera is within this distance of the poi, the visible size of the poi on the screen will be the same as what it looked like when it was constantSizeDistance meters away. If set to 0.0, the size of the poi will be determined by scale, regardless of it’s distance from the camera.
/// Default value is set to 0.
/// version:
/// 1.1
@property (nonatomic, readonly) double constantSizeDistance;
/// The scale in meters to apply to the poi.
/// version:
/// 1.1
@property (nonatomic, readonly) double scale;
/// Create an poi size object with a scale
/// version:
/// 1.1
/// \param scale The scale in meters to apply to the poi.
///
- (nonnull instancetype)initWithScale:(double)pScale OBJC_DESIGNATED_INITIALIZER;
/// Create an poi size object with a scale and a constant size distance.
/// version:
/// 1.1
/// \param scale The scale in meters to apply to the poi.
///
/// \param constantSizeDistance Controls the distance at which the poi does not become bigger as you approach it
///
- (nonnull instancetype)initWithScale:(double)pScale constantSizeDistance:(double)pConstantSizeDistance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that controls the poi’s visibility as a function of the camera’s altitude.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential20VMEPoiVisibilityRamp")
@interface VMEPoiVisibilityRamp : NSObject
/// Creates a visibility ramp object with some default values.
/// note:
/// When using this method, the other properties of the object are initialized to appropriate values. See the property default values for more info.
/// version:
/// 1.1
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A VMEPosition object represents a position incorporating the geographical coordinates, altitude and associated building and floor.
/// Typically, you can use a VMEPosition object when moving the camera, anchoring overlays to the map, creating a route from a position, etc.
/// version:
/// 1.1
SWIFT_CLASS("_TtC18VisioMoveEssential11VMEPosition")
@interface VMEPosition : NSObject <NSCopying>
/// The latitude of the position.
/// version:
/// 1.1
@property (nonatomic) double latitude;
/// The longitude of the position.
/// version:
/// 1.1
@property (nonatomic) double longitude;
/// The altitude of the position.
/// version:
/// 1.1
@property (nonatomic) double altitude;
/// The position’s scene context.
/// version:
/// 1.9
@property (nonatomic, strong) VMESceneContext * _Null_unspecified scene;
/// Constructor for creating a position object inside
/// version:
/// 1.9
/// \param latitude The position’s latitude
///
/// \param longitude The position’s longitude
///
/// \param altitude The position’s altitude, relative to the floor.  For example if the altitude is 10m, then the position will be 10m above the floor.
///
/// \param scene The scene context to associated with the position.
///
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude scene:(VMESceneContext * _Nonnull)scene OBJC_DESIGNATED_INITIALIZER;
/// Constructor for creating a position object inside
/// version:
/// 1.1
/// \param latitude The position’s latitude
///
/// \param longitude The position’s longitude
///
/// \param altitude The position’s altitude, relative to the floor.  For example if the altitude is 10m, then the position will be 10m above the floor.
///
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another VMEPosition object.
/// version:
/// 1.2
/// \param position The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The different ways to interpret multiple destinations, these options do not change the behavior if there is only one destination.
/// For optimal routes there is a practical limit on 5-6 destinations.
/// version:
/// 1.2
typedef SWIFT_ENUM(NSInteger, VMERouteDestinationsOrder, open) {
/// Indicates that the destinations should be traversed in order
/// version:
/// 1.2
  VMERouteDestinationsOrderInOrder = 0,
/// Indicates that the destinations should be traversed in the order that minimizes the overall distance or time: e.g. travelling salesman order
/// version:
/// 1.2
  VMERouteDestinationsOrderOptimal = 1,
/// Indicates that the destinations should be traversed in the order that minimizes the overall distance or time: e.g. travelling salesman order, but always finish on the last routing node of mDestinations.
/// For example, you enter a shop, you visit the different stands and you finish at the exit.
/// version:
/// 1.2
  VMERouteDestinationsOrderOptimalFinishOnLast = 2,
/// Indicates that one destination should be returned, the one that is closest (be fastest or shortest).
/// version:
/// 1.2
  VMERouteDestinationsOrderClosest = 3,
};

enum VMERouteRequestType : NSInteger;

/// Represents a route request to VMEMapView::computeRoute:callback:
/// version:
/// 1.0
SWIFT_CLASS("_TtC18VisioMoveEssential15VMERouteRequest")
@interface VMERouteRequest : NSObject <NSCopying>
/// Requests that the computed route is accessible.
/// note:
/// Refer the map’s “App Configuration” within VisioMapEditor to determine what routing attributes/modalities are filtered when enabled.
/// version:
/// 1.0
@property (nonatomic) BOOL isAccessible;
/// The poi id representing the origin of the route.
/// version:
/// 1.2
@property (nonatomic) id _Nullable origin;
/// Instantiates a route request.
/// note:
/// By default
/// <ul>
///   <li>
///     VMERouteRequest::requestType is set to VMERouteRequestType.fastest
///   </li>
///   <li>
///     VMERouteRequest::destinationsOrder is set to VMERouteDestinationsOrder.InOrder
///   </li>
///   <li>
///     VMERouteRequest::isAccessible is set to false.
///   </li>
/// </ul>
/// version:
/// 1.7
- (nonnull instancetype)init;
/// Instantiates a route request.
/// note:
/// By default:
/// <ul>
///   <li>
///     VMERouteRequest::isAccessible is set to NO.
///   </li>
/// </ul>
/// version:
/// 1.2
/// \param requestType Determines the type of request
///
/// \param destinationsOrder Determines the visiting order of the destination objects
///
- (nonnull instancetype)initWithRequestType:(enum VMERouteRequestType)requestType destinationsOrder:(enum VMERouteDestinationsOrder)destinationsOrder;
/// Instantiates a route request.
/// version:
/// 1.2
/// \param requestType Determines the type of request
///
/// \param destinationsOrder Determines the visiting order of the destination objects
///
/// \param isAccessible Determines if route will be accessible.
///
- (nonnull instancetype)initWithRequestType:(enum VMERouteRequestType)requestType destinationsOrder:(enum VMERouteDestinationsOrder)destinationsOrder accessible:(BOOL)isAccessible OBJC_DESIGNATED_INITIALIZER;
/// version:
/// 1.0
///
/// returns:
/// The origin of the route.
/// The origin may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
- (id _Nullable)getOrigin SWIFT_WARN_UNUSED_RESULT;
/// version:
/// 1.0
///
/// returns:
/// An ordered array containing the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
- (NSArray * _Nonnull)getDestinations SWIFT_WARN_UNUSED_RESULT;
/// Adds a destination to the end of the destinations array’s content.
/// version:
/// 1.0
/// version:
/// 1.2 Now returns a boolean and the destination parameter was made generic.
/// \param destination The destination may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map
///   </li>
/// </ul>
///
///
/// returns:
/// true if the destination was added successfully, otherwise false.
- (BOOL)addDestination:(id _Nonnull)pDestination SWIFT_WARN_UNUSED_RESULT;
/// Adds the objects contained in the given array to the end of the destinations array’s content.
/// version:
/// 1.0
/// version:
/// 1.2 Change return type to bolean
/// \param destinations The destinations array may contain the following object types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
///
///
/// returns:
/// true if one or more of the destination entries where valid, otherwise false.
- (BOOL)addDestinations:(NSArray * _Nonnull)pDestinations SWIFT_WARN_UNUSED_RESULT;
/// Remove destination object at the given index
/// version:
/// 1.2
/// \param index Index of destination to remove.
///
- (void)removeDestinationAt:(NSInteger)index;
/// Remove all destinations objects from the destination array.
/// version:
/// 1.2
- (void)removeAllDestinations;
/// Replace destination object at the given index with the given position
/// version:
/// 1.2
/// \param index Index of destination to replace.
///
/// \param destination The object to add to the destination.  The destination may be one of the following types:
/// <ul>
///   <li>
///     VMEPosition - The physical position within the map
///   </li>
///   <li>
///     NSString - The id of a poi within the map.
///   </li>
/// </ul>
///
///
/// returns:
/// true if the replace occurred successfully, otherwise false.
- (BOOL)replaceDestinationAt:(NSInteger)index withDestination:(id _Nonnull)destination SWIFT_WARN_UNUSED_RESULT;
/// Required for perforing copy operations
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another  object.
/// version:
/// 2.0
/// \param other The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end

/// The route request type determines the parameter to use when calculating the route
/// version:
/// 1.2
typedef SWIFT_ENUM(NSInteger, VMERouteRequestType, open) {
/// Indicates a request for a route that optimizes distance.
/// version:
/// 1.2
  VMERouteRequestTypeShortest = 0,
/// Indicates a request for a route that optimizes time.
/// version:
/// 1.2
  VMERouteRequestTypeFastest = 1,
};

@class VMESegment;

/// Contains information related to a computed route.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential14VMERouteResult")
@interface VMERouteResult : NSObject <NSCopying>
/// The duration (seconds) of the route
/// version:
/// 1.2
@property (nonatomic, readonly) double duration;
/// The length (metres) of the route
/// version:
/// 1.2
@property (nonatomic) double length;
/// An array of destinations in the order that they will be visited.
/// If there was an invalid origin or destination in the request, it will be removed from this array.
/// version:
/// 1.2
@property (nonatomic, readonly, copy) NSArray * _Null_unspecified destinations;
/// An array of segments that make up the route.
/// version:
/// 1.17
@property (nonatomic, readonly, copy) NSArray<VMESegment *> * _Null_unspecified segments;
/// Instantiates a route result object.
/// version:
/// 1.2
/// \param destinations An array of destinations in the order that they will be visited.
///
/// \param duration The duration (seconds) of the route.
///
/// \param length The length (metres) of the route.
///
- (nonnull instancetype)initWithDestinations:(NSArray * _Nonnull)destinations duration:(double)duration length:(double)length;
/// Instantiates a route result object.
/// version:
/// 1.17
/// \param destinations An array of destinations in the order that they will be visited.
///
/// \param duration The duration (seconds) of the route.
///
/// \param length The length (metres) of the route.
///
/// \param segments The array of segment objects that make up the route.
///
- (nonnull instancetype)initWithDestinations:(NSArray * _Nonnull)destinations duration:(double)duration length:(double)length segments:(NSArray<VMESegment *> * _Nonnull)segments OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Determines if this object is equal to another VMERouteResult object.
/// version:
/// 1.2
/// \param routeResult The object to compare self to.
///
///
/// returns:
/// true if the objects are equal, otherwise false.
- (BOOL)isEqualTo:(VMERouteResult * _Nonnull)routeResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A VMESceneContext object represents a physical location within the map.
/// The scene context may be either outside or within a building.
/// version:
/// 1.9
SWIFT_CLASS("_TtC18VisioMoveEssential15VMESceneContext")
@interface VMESceneContext : NSObject <NSCopying>
/// The id of the building.
/// note:
/// If isOutside returns YES, then this value is undefined.
/// version:
/// 1.9
@property (nonatomic, readonly, copy) NSString * _Nullable buildingID;
/// The id of the floor.
/// note:
/// If isOutside returns true, then this value is undefined
/// version:
/// 1.9
@property (nonatomic, readonly, copy) NSString * _Nullable floorID;
/// Create a scene context for a given building and floor
/// version:
/// 1.9
/// \param buildingID The id of the building
///
/// \param floorID The id of the floor
///
- (nonnull instancetype)initWithBuildingID:(NSString * _Nullable)buildingID floorID:(NSString * _Nullable)floorID;
/// Create a scene context for the outside.
/// version:
/// 1.9
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// version:
/// 1.9
///
/// returns:
/// true if the scene context is located outside, otherwise false.
- (BOOL)isOutside SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Compares two scene context objects to determine whether they are equal.
/// version:
/// 2.0
/// \param other The object to compare against.
///
///
/// returns:
/// true if this scene context object is equal.
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a scene update that can be applied to the VMEMapController.
/// Use the provided constructors to instantiate different types of scene updates.
/// A scene update can be used to change the following:
/// <ul>
///   <li>
///     view mode
///   </li>
///   <li>
///     focused building
///   </li>
///   <li>
///     focused floor
///   </li>
/// </ul>
/// Updating the scene will not update the camera.
/// note:
/// Due to the “zoom storyboard”, if the camera is focused on a different building to that in the requested scene update, then the next time the user interacts with the map, the focused building will change automatically.
/// version:
/// 1.2
SWIFT_CLASS("_TtC18VisioMoveEssential14VMESceneUpdate")
@interface VMESceneUpdate : NSObject
/// Update the scene’s view mode.  The current focused building and floor will remain unchanged.
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode SWIFT_WARN_UNUSED_RESULT;
/// Update the scene.
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
/// \param buildingID The building id to apply focus.  The focused floor will be determined by the first of the following:
/// <ul>
///   <li>
///     the current floor if it is associated with the building
///   </li>
///   <li>
///     the building’s default floor, if it has one.
///   </li>
///   <li>
///     otherwise the ground floor will be given focus.
///   </li>
/// </ul>
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode buildingID:(NSString * _Nullable)buildingID SWIFT_WARN_UNUSED_RESULT;
/// Update the scene
/// version:
/// 1.2
/// \param viewMode The view mode to change to.  Pass ::VMEViewModeUnknown to leave the current view mode.
///
/// \param floorID The floor id to apply focus.  The building id associated with the floorID will be deduced.
///
+ (VMESceneUpdate * _Nonnull)sceneUpdateWithViewMode:(enum VMEViewMode)viewMode floorID:(NSString * _Nullable)floorID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Callback protocol for receiving search view results.
/// note:
/// VMEMapController::showSearchViewWithTitle: for displaying the search view.
/// version:
/// 1.0
SWIFT_PROTOCOL("_TtP18VisioMoveEssential21VMESearchViewCallback_")
@protocol VMESearchViewCallback <NSObject>
/// Notified when a poi was selected from the search view
/// version:
/// 1.0
/// \param mapController The map view who received the original request
///
/// \param poiID The id of the poi selected.
///
- (void)searchViewDidSelectPoiIDWithMapController:(VMEMapController * _Nonnull)mapController poiID:(NSString * _Nonnull)poiID;
/// Notified when the search view was cancelled
/// version:
/// 1.0
/// \param mapController The map view who received the original request.
///
- (void)searchViewDidCancelWithMapController:(VMEMapController * _Nonnull)mapController;
@end


/// A segment describes a part of a computed route.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18VisioMoveEssential10VMESegment")
@interface VMESegment : NSObject <NSCopying>
/// The path of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSArray<VMEPosition *> * _Null_unspecified path;
/// The duration (seconds) of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) double duration;
/// The length (metres) of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) double length;
/// The maneuver type of the segment.
/// <ul>
///   <li>
///     Version 1.17
///   </li>
/// </ul>
@property (nonatomic, readonly) enum VMEManeuverType maneuverType;
/// The floor transition type of the segment.
/// If the segment doesn’t change floors, then will be set to ::VMEFloorTransitionTypeNone.
/// <ul>
///   <li>
///     Version 1.22
///   </li>
/// </ul>
@property (nonatomic, readonly) enum VMEFloorTransitionType floorTransitionType;
/// The floor transition id of the segment.
/// If there is no floor transition then value is “”.
/// <ul>
///   <li>
///     Version 1.22
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull floorTransitionId;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The view mode controls certain elements of the scene and possibly the camera’s viewpoint.
/// version:
/// 1.0
typedef SWIFT_ENUM(NSInteger, VMEViewMode, open) {
/// note:
///
/// In global mode, the following occurs:
/// <ul>
///   <li>
///     The camera focuses on the footprint “outside”.
///   </li>
///   <li>
///     If present, all building models are made visible and building icons will appear.
///   </li>
///   <li>
///     All floors from all buildings will be hidden.
///   </li>
/// </ul>
/// version:
/// 1.0
  VMEViewModeGlobal = 0,
/// note:
///
/// In floor mode, the following occurs:
/// <ul>
///   <li>
///     If present, the focused building’s model will animate and disappear.
///   </li>
///   <li>
///     The focused building’s floors will appear in lego mode.
///   </li>
///   <li>
///     The camera will focus on the focused floor’s footprint.
///   </li>
/// </ul>
/// version:
/// 1.0
  VMEViewModeFloor = 1,
/// The view mode is undefined.  If this value is passed in an camera update, then the most appropriate view mode will be chosen.
/// version:
/// 1.0
  VMEViewModeUnknown = 2,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
